File: .gitignore
Path: 
Content:
/build
-----------------------------------------------------------------------------
File: build.gradle.kts
Path: 
Content:
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    id("kotlin-parcelize")
}

android {
    namespace = "io.github.galitach.mathhero"
    compileSdk = 36
    kotlin {
        jvmToolchain(8)
    }
    defaultConfig {
        applicationId = "io.github.galitach.mathhero"
        minSdk = 24
        targetSdk = 36
        versionCode = 4
        versionName = "2.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.ktx)
    implementation(libs.androidx.fragment.ktx)
    implementation(libs.google.ads)
    implementation(libs.google.ump)
    implementation(libs.androidx.recyclerview)
    implementation(libs.bundles.google.play.appUpdate)
    testImplementation(libs.junit)
    implementation(libs.google.play.billing)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    implementation(libs.konfetti.view)
    implementation(libs.androidx.splashscreen)
    implementation(libs.google.play.services.oss.licenses)
}
-----------------------------------------------------------------------------
File: MathHero.txt
Path: 
Content:

-----------------------------------------------------------------------------
File: proguard-rules.pro
Path: 
Content:
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# --- General Best Practices ---
-dontobfuscate
-keepattributes Signature,InnerClasses,EnclosingMethod
-keep class com.google.android.gms.ads.** { *; }
-keep class com.google.android.ump.** { *; }
-keep class nl.dionsegijn.konfetti.** { *; }
-keep class com.google.android.play.core.** { *; }

# --- Keep Application Entry Points ---
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.view.View {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}

# --- Keep Kotlin Specifics ---
-keep class kotlin.coroutines.jvm.internal.DebugMetadataKt
-dontwarn kotlin.Unit
-keepclassmembers class kotlin.Metadata {
    public <methods>;
}
-keepclassmembers class kotlin.coroutines.jvm.internal.BaseContinuationImpl {
    private java.lang.Object[] getSpilledStack();
    private java.lang.String getSpilledStack(int, int);
}

# --- Parcelize ---
# This is the most critical rule for Parcelable data classes.
-keepclassmembers class * implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
}
-keepnames class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

# --- Keep ViewModels and their factories ---
-keep class androidx.lifecycle.ViewModel { *; }
-keep class androidx.lifecycle.ViewModelProvider$Factory { *; }
-keep class * extends androidx.lifecycle.ViewModel
-keepclassmembers class * extends androidx.lifecycle.ViewModel {
    <init>(...);
}

# --- Data classes (used for state and models) ---
# Keep the constructor and all public methods of data classes.
-keepclassmembers public final class **.data.** {
    public <init>(...);
    public final <methods>;
}

# --- Keep Enums ---
# Keep all members of enums, which is crucial for methods like valueOf().
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}
-----------------------------------------------------------------------------
File: ExampleInstrumentedTest.kt
Path: 
Content:
package io.github.galitach.mathhero

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("io.github.galitach.mathhero", appContext.packageName)
    }
}
-----------------------------------------------------------------------------
File: AndroidManifest.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission android:name="com.google.android.gms.ads.identifier.AD_ID"/>
    <uses-permission android:name="com.android.vending.BILLING" />

    <application
        android:name=".MathHeroApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.mathhero"
        tools:targetApi="31">
        <receiver
            android:name=".notifications.NotificationActionReceiver"
            android:enabled="true" />
        <!-- Sample AdMob App ID. Replace with your own. -->
        <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="ca-app-pub-9478542207288731~3776517222" />

        <activity
            android:name=".ui.MainActivity"
            android:exported="true"
            android:theme="@style/Theme.mathhero">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <receiver
            android:name=".notifications.NotificationReceiver"
            android:enabled="true" />

        <receiver
            android:name=".notifications.BootCompletedReceiver"
            android:enabled="true"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
            </intent-filter>
        </receiver>

    </application>

</manifest>
-----------------------------------------------------------------------------
File: BillingManager.kt
Path: 
Content:
package io.github.galitach.mathhero.billing

import android.app.Activity
import android.app.Application
import android.util.Log
import com.android.billingclient.api.AcknowledgePurchaseParams
import com.android.billingclient.api.BillingClient
import com.android.billingclient.api.BillingClientStateListener
import com.android.billingclient.api.BillingFlowParams
import com.android.billingclient.api.BillingResult
import com.android.billingclient.api.PendingPurchasesParams
import com.android.billingclient.api.ProductDetails
import com.android.billingclient.api.Purchase
import com.android.billingclient.api.PurchasesUpdatedListener
import com.android.billingclient.api.QueryProductDetailsParams
import com.android.billingclient.api.QueryPurchasesParams
import com.android.billingclient.api.queryProductDetails
import io.github.galitach.mathhero.data.Constants
import io.github.galitach.mathhero.data.SharedPreferencesManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class BillingManager(
    private val application: Application,
    private val coroutineScope: CoroutineScope
) {
    private val _productDetails = MutableStateFlow<ProductDetails?>(null)
    val productDetails = _productDetails.asStateFlow()

    private val _isPro = MutableStateFlow(SharedPreferencesManager.isProUser())
    val isPro = _isPro.asStateFlow()

    private val purchasesUpdatedListener = PurchasesUpdatedListener { billingResult, purchases ->
        if (billingResult.responseCode == BillingClient.BillingResponseCode.OK && purchases != null) {
            for (purchase in purchases) {
                coroutineScope.launch {
                    handlePurchase(purchase)
                }
            }
        } else {
            Log.e("BillingManager", "Purchase error: ${billingResult.debugMessage}")
        }
    }

    private var billingClient: BillingClient

    init {
        val pendingPurchasesParams = PendingPurchasesParams.newBuilder()
            .enableOneTimeProducts()
            .build()

        billingClient = BillingClient.newBuilder(application)
            .setListener(purchasesUpdatedListener)
            .enablePendingPurchases(pendingPurchasesParams)
            .build()

        startConnection()
    }

    private fun startConnection() {
        billingClient.startConnection(object : BillingClientStateListener {
            override fun onBillingSetupFinished(billingResult: BillingResult) {
                if (billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
                    Log.d("BillingManager", "Billing client setup finished.")
                    coroutineScope.launch {
                        queryProductDetails()
                        queryPurchases()
                    }
                } else {
                    Log.e("BillingManager", "Billing setup failed: ${billingResult.debugMessage}")
                }
            }

            override fun onBillingServiceDisconnected() {
                Log.w("BillingManager", "Billing service disconnected. Retrying...")
                startConnection()
            }
        })
    }

    private suspend fun queryProductDetails() {
        val productList = listOf(
            QueryProductDetailsParams.Product.newBuilder()
                .setProductId(Constants.PRO_SKU)
                .setProductType(BillingClient.ProductType.INAPP)
                .build()
        )
        val params = QueryProductDetailsParams.newBuilder().setProductList(productList)
        val result = billingClient.queryProductDetails(params.build())
        if (result.billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
            _productDetails.value = result.productDetailsList?.firstOrNull()
        } else {
            Log.e("BillingManager", "Failed to query product details: ${result.billingResult.debugMessage}")
        }
    }

    fun launchPurchaseFlow(activity: Activity) {
        val product = _productDetails.value
        if (product == null) {
            Log.e("BillingManager", "Product details not available to launch purchase flow.")
            return
        }

        val productDetailsParamsList = listOf(
            BillingFlowParams.ProductDetailsParams.newBuilder()
                .setProductDetails(product)
                .build()
        )
        val billingFlowParams = BillingFlowParams.newBuilder()
            .setProductDetailsParamsList(productDetailsParamsList)
            .build()

        val billingResult = billingClient.launchBillingFlow(activity, billingFlowParams)
        if (billingResult.responseCode != BillingClient.BillingResponseCode.OK) {
            Log.e("BillingManager", "Failed to launch billing flow: ${billingResult.debugMessage}")
        }
    }

    private suspend fun handlePurchase(purchase: Purchase) {
        if (purchase.purchaseState == Purchase.PurchaseState.PURCHASED) {
            if (!purchase.isAcknowledged) {
                val acknowledgePurchaseParams = AcknowledgePurchaseParams.newBuilder()
                    .setPurchaseToken(purchase.purchaseToken)
                    .build()
                billingClient.acknowledgePurchase(acknowledgePurchaseParams) { billingResult ->
                    if (billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
                        grantProAccess()
                    } else {
                        Log.e("BillingManager", "Purchase acknowledgment failed: ${billingResult.debugMessage}")
                    }
                }
            } else {
                grantProAccess()
            }
        }
    }

    private suspend fun queryPurchases() {
        val params = QueryPurchasesParams.newBuilder()
            .setProductType(BillingClient.ProductType.INAPP)
            .build()
        billingClient.queryPurchasesAsync(params) { billingResult, purchases ->
            if (billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
                val proPurchase = purchases.find { purchase ->
                    purchase.products.contains(Constants.PRO_SKU) && purchase.purchaseState == Purchase.PurchaseState.PURCHASED
                }
                if (proPurchase != null) {
                    grantProAccess()
                } else {
                    revokeProAccess()
                }
            }
        }
    }

    private fun grantProAccess() {
        SharedPreferencesManager.setProUser(true)
        _isPro.value = true
    }

    private fun revokeProAccess() {
        SharedPreferencesManager.setProUser(false)
        _isPro.value = false
    }
}
-----------------------------------------------------------------------------
File: Constants.kt
Path: 
Content:
package io.github.galitach.mathhero.data

object Constants {
    const val PRO_SKU = "math_hero_pro_upgrade"
}
-----------------------------------------------------------------------------
File: Difficulty.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.os.Parcelable
import androidx.annotation.DrawableRes
import io.github.galitach.mathhero.R
import kotlinx.parcelize.Parcelize

@Parcelize
data class DifficultySettings(
    val operations: Set<Operation>,
    val maxNumber: Int
) : Parcelable

enum class DifficultyLevel(
    val titleRes: Int,
    val descriptionRes: Int,
    @param:DrawableRes val iconRes: Int,
    val settings: DifficultySettings
) {
    NOVICE(
        R.string.difficulty_novice,
        R.string.difficulty_novice_desc,
        R.drawable.ic_preset_novice,
        DifficultySettings(setOf(Operation.ADDITION), 10)
    ),
    APPRENTICE(
        R.string.difficulty_apprentice,
        R.string.difficulty_apprentice_desc,
        R.drawable.ic_preset_apprentice,
        DifficultySettings(setOf(Operation.ADDITION, Operation.SUBTRACTION), 20)
    ),
    ADEPT(
        R.string.difficulty_adept,
        R.string.difficulty_adept_desc,
        R.drawable.ic_preset_apprentice,
        DifficultySettings(setOf(Operation.ADDITION, Operation.SUBTRACTION), 50)
    ),
    EXPERT(
        R.string.difficulty_expert,
        R.string.difficulty_expert_desc,
        R.drawable.ic_preset_expert,
        DifficultySettings(setOf(Operation.ADDITION, Operation.SUBTRACTION, Operation.MULTIPLICATION), 20) // smaller numbers for multiplication
    ),
    MASTER(
        R.string.difficulty_master,
        R.string.difficulty_master_desc,
        R.drawable.ic_preset_master,
        DifficultySettings(setOf(Operation.ADDITION, Operation.SUBTRACTION, Operation.MULTIPLICATION, Operation.DIVISION), 100)
    );
}
-----------------------------------------------------------------------------
File: MathProblem.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.os.Parcelable
import kotlinx.parcelize.Parcelize

@Parcelize
data class MathProblem(
    val id: Int,
    val question: String,
    val answer: String,
    val distractor1: String,
    val distractor2: String,
    val difficulty: Int,
    val explanation: String?,
    val num1: Int,
    val num2: Int,
    val operator: String
) : Parcelable
-----------------------------------------------------------------------------
File: MathProblemGenerator.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.content.Context
import android.util.Log
import io.github.galitach.mathhero.R
import kotlin.math.abs
import kotlin.math.log10
import kotlin.math.max
import kotlin.math.min
import kotlin.math.round
import kotlin.random.Random

/**
 * A deterministic, progressive, and performant math problem generator.
 *
 * This object creates math problems based on difficulty settings and a user's streak.
 * Key principles:
 * - **Deterministic:** Given the same seed, it will always produce the exact same problem.
 * - **Progressive Difficulty:** Problems get harder as the streak increases by using a "sliding window"
 *   for number selection and weighting operations.
 * - **Performant:** All generation logic, including for division, is designed to be fast and
 *   avoid expensive computations or unbounded memory usage.
 * - **Robust:** It handles invalid settings gracefully and is architecturally thread-safe.
 */
object MathProblemGenerator {

    // === CONFIGURABLE CONSTANTS ===
    private const val STREAK_CAP = 100.0
    private const val MIN_WINDOW_FRACTION = 0.4   // At max streak, window is 40% of total range
    private const val MIN_WINDOW_SIZE = 3         // Never shrink below this many values
    private const val MIN_DIVISOR = 2             // Avoid trivial ÷1 problems
    private const val WEIGHT_RAMP = 14.0          // Controls how fast hard ops become common
    private const val MAX_DISTRACTOR_DISTANCE_FACTOR = 3
    private const val MAX_DISTRACTOR_DISTANCE_CAP = 25

    fun generateProblem(
        context: Context,
        settings: DifficultySettings,
        streak: Int,
        seed: Long
    ): MathProblem {
        val random = Random(seed)

        // Validate settings
        val requestedMax = settings.maxNumber
        val operation = selectWeightedOperation(settings.operations, streak, random)
        val minNumber = if (operation == Operation.MULTIPLICATION || operation == Operation.DIVISION) MIN_DIVISOR else 1
        val safeMaxNumber = max(requestedMax, minNumber)
        if (safeMaxNumber != requestedMax) {
            Log.w("MathProblemGenerator", "Invalid maxNumber=$requestedMax. Using $safeMaxNumber instead.")
        }

        // Progressive operand range
        val (rangeStart, rangeEnd) = getProgressiveRange(minNumber, safeMaxNumber, streak)

        // Generate problem
        val (question, answer, num1, num2) = when (operation) {
            Operation.ADDITION -> generateAddition(random, rangeStart, rangeEnd)
            Operation.SUBTRACTION -> generateSubtraction(random, rangeStart, rangeEnd)
            Operation.MULTIPLICATION -> generateMultiplication(random, rangeStart, rangeEnd)
            Operation.DIVISION -> generateDivision(random, rangeStart, rangeEnd, safeMaxNumber)
        }

        val difficulty = calculateDifficulty(num1, num2, answer, operation)
        val (d1, d2) = generateDistractors(answer, difficulty, random)
        val explanation = generateExplanation(context, answer, num1, num2, operation, random)

        return MathProblem(
            id = stableId(seed, operation, num1, num2, answer),
            question = context.getString(R.string.question_format, question),
            answer = answer.toString(),
            distractor1 = d1.toString(),
            distractor2 = d2.toString(),
            difficulty = difficulty,
            explanation = explanation,
            num1 = num1,
            num2 = num2,
            operator = operation.symbol
        )
    }

    // === RANGE PROGRESSION ===
    private fun getProgressiveRange(minNumber: Int, maxNumber: Int, streak: Int): Pair<Int, Int> {
        if (minNumber >= maxNumber) return minNumber to maxNumber

        val prog = (streak / STREAK_CAP).coerceIn(0.0, 1.0)
        val totalRange = maxNumber - minNumber + 1

        // Window shrinks as progression increases, but never below a minimum size.
        val minWindow = min(MIN_WINDOW_SIZE, totalRange)
        val targetWindowSize = totalRange * (1.0 - (1.0 - MIN_WINDOW_FRACTION) * prog)
        val windowSize = round(targetWindowSize).toInt().coerceIn(minWindow, totalRange)

        // The start of the window slides up towards the max number with progression.
        val maxPossibleStart = maxNumber - windowSize + 1
        val start = (minNumber + (maxPossibleStart - minNumber) * prog).toInt().coerceIn(minNumber, maxPossibleStart)
        val end = (start + windowSize - 1)

        return start to end
    }

    // === OPERATION SELECTION ===
    private fun selectWeightedOperation(ops: Set<Operation>, streak: Int, random: Random): Operation {
        if (ops.isEmpty()) return Operation.ADDITION
        if (ops.size == 1) return ops.first()
        val prog = (streak / STREAK_CAP).coerceIn(0.0, 1.0)
        val weights = ops.associateWith { op ->
            when (op) {
                Operation.ADDITION -> 10.0
                Operation.SUBTRACTION -> 10.0
                Operation.MULTIPLICATION -> 1.0 + WEIGHT_RAMP * prog
                Operation.DIVISION -> 1.0 + WEIGHT_RAMP * prog
            }
        }.entries.shuffled(random)
        val total = weights.sumOf { it.value }
        var r = random.nextDouble() * total
        for ((op, w) in weights) {
            if (r < w) return op
            r -= w
        }
        return weights.last().key
    }

    // === PROBLEM GENERATORS ===
    private fun generateAddition(r: Random, min: Int, max: Int): Quadruple<String, Int, Int, Int> {
        val a = r.nextInt(min, max + 1)
        val b = r.nextInt(min, max + 1)
        return Quadruple("$a + $b", a + b, a, b)
    }

    private fun generateSubtraction(r: Random, min: Int, max: Int): Quadruple<String, Int, Int, Int> {
        val a = r.nextInt(min, max + 1)
        val b = r.nextInt(min, a + 1)
        return Quadruple("$a - $b", a - b, a, b)
    }

    private fun generateMultiplication(r: Random, min: Int, max: Int): Quadruple<String, Int, Int, Int> {
        val a = r.nextInt(min, max + 1)
        val b = r.nextInt(min, max + 1)
        return Quadruple("$a × $b", a * b, a, b)
    }

    private fun generateDivision(r: Random, min: Int, max: Int, overallMax: Int): Quadruple<String, Int, Int, Int> {
        // Construct a valid problem to avoid expensive searches and ensure numbers are in range.
        val b = r.nextInt(max(MIN_DIVISOR, min), max + 1)
        // Ensure the answer, when multiplied by b, doesn't grossly exceed the user's max difficulty.
        val maxQuotient = (overallMax / b).coerceAtLeast(1)
        val q = r.nextInt(1, maxQuotient + 1)
        val a = b * q
        return Quadruple("$a ÷ $b", q, a, b)
    }

    // === DIFFICULTY ===
    private fun calculateDifficulty(num1: Int, num2: Int, answer: Int, op: Operation): Int {
        val magnitude = when (op) {
            Operation.ADDITION, Operation.SUBTRACTION -> max(num1, num2).toDouble()
            Operation.MULTIPLICATION -> answer.toDouble()
            Operation.DIVISION -> num1.toDouble()
        }.coerceAtLeast(1.0)
        val base = log10(magnitude) * 3.0
        val opBonus = when (op) {
            Operation.ADDITION -> 0.0
            Operation.SUBTRACTION -> 0.3
            Operation.MULTIPLICATION -> 1.8
            Operation.DIVISION -> 2.1
        }
        val spread = abs(num1 - num2) / 50.0
        return round((base + opBonus + spread).coerceIn(0.5, 10.0)).toInt().coerceIn(1, 10)
    }

    // === DISTRACTORS ===
    private fun generateDistractors(answer: Int, difficulty: Int, r: Random): Pair<Int, Int> {
        val near = max(1, min(5, difficulty))
        val far = max(3, min(MAX_DISTRACTOR_DISTANCE_CAP, difficulty * MAX_DISTRACTOR_DISTANCE_FACTOR))
        val offsets = mutableListOf<Int>()

        // Strategy 1: A close distractor
        offsets += (1 + r.nextInt(near)) * if (r.nextBoolean()) 1 else -1

        // Strategy 2: A farther, more distinct distractor
        var off2 = (near + r.nextInt(far - near + 1)) * if (r.nextBoolean()) 1 else -1
        if (off2 == 0 || off2 == offsets[0]) off2 += if (off2 >= 0) 1 else -1
        offsets += off2

        // Convert offsets to actual distractor values, filtering invalids
        val distractors = mutableListOf<Int>()
        for (off in offsets) {
            val candidate = answer + off
            if (candidate >= 0 && candidate != answer && candidate !in distractors) {
                distractors.add(candidate)
            }
        }

        // Fallback fill if strategies produced duplicates or invalid numbers
        var step = 1
        while (distractors.size < 2) {
            val up = answer + step
            val down = answer - step
            if (up >= 0 && up != answer && up !in distractors) distractors.add(up)
            if (distractors.size < 2 && down >= 0 && down != answer && down !in distractors) distractors.add(down)
            step++
        }

        distractors.sort() // Sort for deterministic ordering (d1 < d2)
        return distractors[0] to distractors[1]
    }

    // === EXPLANATION ===
    private fun generateExplanation(
        context: Context, answer: Int, num1: Int, num2: Int, op: Operation, random: Random
    ): String {
        val templates = when (op) {
            Operation.ADDITION -> context.resources.getStringArray(R.array.addition_explanations)
            Operation.SUBTRACTION -> context.resources.getStringArray(R.array.subtraction_explanations)
            Operation.MULTIPLICATION -> context.resources.getStringArray(R.array.multiplication_explanations)
            Operation.DIVISION -> context.resources.getStringArray(R.array.division_explanations)
        }
        return try {
            String.format(templates.random(random), num1, num2, answer)
        } catch (_: Exception) {
            context.getString(R.string.default_explanation, answer)
        }
    }

    // === STABLE ID ===
    private fun stableId(seed: Long, op: Operation, a: Int, b: Int, ans: Int): Int {
        var h = 1125899906842597L // large prime
        h = 31L * h + seed
        h = 31L * h + op.ordinal
        h = 31L * h + a
        h = 31L * h + b
        h = 31L * h + ans
        return (h xor (h ushr 32)).toInt() and 0x7FFFFFFF
    }
}

// Helper class to return multiple values
data class Quadruple<A, B, C, D>(
    val first: A,
    val second: B,
    val third: C,
    val fourth: D
)
-----------------------------------------------------------------------------
File: MathProblemRepository.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.content.Context
import java.util.Calendar
import kotlin.random.Random

class MathProblemRepository(
    private val context: Context,
    private val prefsManager: SharedPreferencesManager
) {

    fun getCurrentProblem(): MathProblem {
        val settings = prefsManager.getDifficultySettings()
        val streak = prefsManager.getStreakCount()
        // Use day of year as a seed for a deterministic daily problem
        val dayOfYear = Calendar.getInstance().get(Calendar.DAY_OF_YEAR)
        return MathProblemGenerator.generateProblem(context, settings, streak, dayOfYear.toLong())
    }

    fun getBonusProblem(): MathProblem {
        val settings = prefsManager.getDifficultySettings()
        val streak = prefsManager.getStreakCount()
        // Use a random seed for a new, non-deterministic problem
        return MathProblemGenerator.generateProblem(context, settings, streak, Random.nextLong())
    }

    fun getArchivedProblems(): List<MathProblem> {
        return prefsManager.getArchivedProblems()
    }
}
-----------------------------------------------------------------------------
File: Operation.kt
Path: 
Content:
package io.github.galitach.mathhero.data

enum class Operation(val symbol: String) {
    ADDITION("+"),
    SUBTRACTION("-"),
    MULTIPLICATION("×"),
    DIVISION("÷")
}
-----------------------------------------------------------------------------
File: ProblemResult.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.os.Parcelable
import kotlinx.parcelize.Parcelize

@Parcelize
data class ProblemResult(
    val timestamp: Long,
    val operation: Operation,
    val wasCorrect: Boolean
) : Parcelable
-----------------------------------------------------------------------------
File: ProgressCalculator.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import java.util.Calendar
import java.util.concurrent.TimeUnit

object ProgressCalculator {

    fun generateReport(results: List<ProblemResult>, highestStreak: Int): ProgressReport {
        val accuracyMap = mutableMapOf<Operation, Pair<Int, Int>>()
        Operation.entries.forEach { op ->
            val relevantResults = results.filter { it.operation == op }
            val correct = relevantResults.count { it.wasCorrect }
            val total = relevantResults.size
            if (total > 0) {
                accuracyMap[op] = Pair(correct, total)
            }
        }

        val sevenDaysAgo = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(7)
        val solvedLast7Days = results.count { it.timestamp >= sevenDaysAgo }

        val totalSolved = results.size

        val averagePerDay = if (results.isNotEmpty()) {
            val firstDay = Calendar.getInstance().apply { timeInMillis = results.last().timestamp }
            val today = Calendar.getInstance()
            val days = TimeUnit.MILLISECONDS.toDays(today.timeInMillis - firstDay.timeInMillis).coerceAtLeast(1)
            totalSolved / days.toDouble()
        } else {
            0.0
        }

        return ProgressReport(
            accuracyByOperation = accuracyMap,
            problemsSolvedLast7Days = solvedLast7Days,
            totalProblemsSolved = totalSolved,
            longestStreak = highestStreak,
            averageProblemsPerDay = averagePerDay
        )
    }
}
-----------------------------------------------------------------------------
File: ProgressReport.kt
Path: 
Content:
package io.github.galitach.mathhero.data

data class ProgressReport(
    val accuracyByOperation: Map<Operation, Pair<Int, Int>>, // Correct, Total
    val problemsSolvedLast7Days: Int,
    val totalProblemsSolved: Int,
    val longestStreak: Int,
    val averageProblemsPerDay: Double
)
-----------------------------------------------------------------------------
File: Rank.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.annotation.SuppressLint
import androidx.annotation.DrawableRes
import androidx.annotation.StringRes
import io.github.galitach.mathhero.R

data class Rank(
    val level: Int,
    @param:StringRes val nameRes: Int,
    val requiredStreak: Int,
    @param:DrawableRes val imageRes: Int
) {
    @SuppressLint("ResourceType")
    companion object {
        val allRanks by lazy {
            listOf(
                Rank(1, R.string.rank_novice, 0, R.raw.mathhero_1),
                Rank(2, R.string.rank_apprentice, 10, R.raw.mathhero_2),
                Rank(3, R.string.rank_adept, 25, R.raw.mathhero_3),
                Rank(4, R.string.rank_specialist, 50, R.raw.mathhero_4),
                Rank(5, R.string.rank_expert, 75, R.raw.mathhero_5),
                Rank(6, R.string.rank_master, 100, R.raw.mathhero_6),
                Rank(7, R.string.rank_grandmaster, 150, R.raw.mathhero_7),
                Rank(8, R.string.rank_legend, 200, R.raw.mathhero_8),
                Rank(9, R.string.rank_mythic, 300, R.raw.mathhero_9),
                Rank(10, R.string.rank_titan, 500, R.raw.mathhero_10)
            )
        }

        fun getRankForStreak(streak: Int): Rank {
            return allRanks.last { streak >= it.requiredStreak }
        }
    }
}
-----------------------------------------------------------------------------
File: SharedPreferencesManager.kt
Path: 
Content:
package io.github.galitach.mathhero.data

import android.content.Context
import android.content.SharedPreferences
import androidx.core.content.edit

object SharedPreferencesManager {

    private const val PREFS_NAME = "MathHeroPrefs"
    private const val KEY_ARCHIVED_PROBLEMS = "archived_math_problems"
    private const val KEY_STREAK_COUNT = "streak_count"
    private const val KEY_HIGHEST_STREAK_COUNT = "highest_streak_count"
    private const val KEY_NOTIFICATIONS_ENABLED = "notifications_enabled"
    private const val KEY_DIFFICULTY_OPERATIONS = "difficulty_operations"
    private const val KEY_DIFFICULTY_MAX_NUMBER = "difficulty_max_number"
    private const val KEY_CONSECUTIVE_WRONG_ANSWERS = "consecutive_wrong_answers"
    private const val KEY_ONBOARDING_COMPLETED = "onboarding_completed"
    private const val KEY_SOUND_ENABLED = "sound_enabled"
    private const val KEY_IS_PRO_USER = "is_pro_user"
    private const val KEY_PROGRESS_DATA = "progress_data"
    private const val MAX_ARCHIVE_SIZE = 7
    private const val MAX_PROGRESS_ENTRIES = 200

    private lateinit var prefs: SharedPreferences

    fun initialize(context: Context) {
        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun isSoundEnabled(): Boolean {
        return prefs.getBoolean(KEY_SOUND_ENABLED, true)
    }

    fun setSoundEnabled(enabled: Boolean) {
        prefs.edit { putBoolean(KEY_SOUND_ENABLED, enabled) }
    }

    fun isOnboardingCompleted(): Boolean {
        return prefs.getBoolean(KEY_ONBOARDING_COMPLETED, false)
    }

    fun setOnboardingCompleted() {
        prefs.edit { putBoolean(KEY_ONBOARDING_COMPLETED, true) }
    }

    fun getArchivedProblems(): List<MathProblem> {
        val problemStrings = prefs.getStringSet(KEY_ARCHIVED_PROBLEMS, emptySet()) ?: emptySet()
        return problemStrings.mapNotNull { deserializeProblem(it) }.sortedByDescending { it.id }
    }

    fun addProblemToArchive(problem: MathProblem) {
        val currentProblems = getArchivedProblems().toMutableList()
        if (currentProblems.any { it.id == problem.id }) return

        currentProblems.add(0, problem)
        val updatedProblems = currentProblems.take(MAX_ARCHIVE_SIZE)
        val problemStrings = updatedProblems.map { serializeProblem(it) }.toSet()
        prefs.edit { putStringSet(KEY_ARCHIVED_PROBLEMS, problemStrings) }
    }

    private fun serializeProblem(problem: MathProblem): String {
        return with(problem) {
            "$id|$question|$answer|$distractor1|$distractor2|$difficulty|${explanation.orEmpty()}|$num1|$num2|$operator"
        }
    }

    private fun deserializeProblem(problemString: String): MathProblem? {
        return try {
            val parts = problemString.split('|')
            MathProblem(
                id = parts[0].toInt(),
                question = parts[1],
                answer = parts[2],
                distractor1 = parts[3],
                distractor2 = parts[4],
                difficulty = parts[5].toInt(),
                explanation = parts[6].takeIf { it.isNotEmpty() },
                num1 = parts[7].toInt(),
                num2 = parts[8].toInt(),
                operator = parts[9]
            )
        } catch (_: Exception) {
            null
        }
    }

    fun getStreakCount(): Int {
        return prefs.getInt(KEY_STREAK_COUNT, 0)
    }

    fun getHighestStreakCount(): Int {
        return prefs.getInt(KEY_HIGHEST_STREAK_COUNT, 0)
    }

    fun updateStreak(isCorrect: Boolean) {
        val currentStreak = getStreakCount()
        val newStreak = if (isCorrect) currentStreak + 1 else 0

        if (newStreak > getHighestStreakCount()) {
            prefs.edit { putInt(KEY_HIGHEST_STREAK_COUNT, newStreak) }
        }
        prefs.edit { putInt(KEY_STREAK_COUNT, newStreak) }
    }

    fun areNotificationsEnabled(): Boolean {
        return prefs.getBoolean(KEY_NOTIFICATIONS_ENABLED, false) // Default to false
    }

    fun setNotificationsEnabled(enabled: Boolean) {
        prefs.edit { putBoolean(KEY_NOTIFICATIONS_ENABLED, enabled) }
    }

    fun isDifficultySet(): Boolean {
        return prefs.contains(KEY_DIFFICULTY_MAX_NUMBER)
    }

    fun saveDifficultySettings(settings: DifficultySettings) {
        val operationNames = settings.operations.map { it.name }.toSet()
        prefs.edit {
            putStringSet(KEY_DIFFICULTY_OPERATIONS, operationNames)
            putInt(KEY_DIFFICULTY_MAX_NUMBER, settings.maxNumber)
        }
    }

    fun getDifficultySettings(): DifficultySettings {
        val defaultSettings = DifficultyLevel.NOVICE.settings
        val operationNames = prefs.getStringSet(KEY_DIFFICULTY_OPERATIONS, null)
        val maxNumber = prefs.getInt(KEY_DIFFICULTY_MAX_NUMBER, -1)

        if (operationNames == null || maxNumber == -1) {
            return defaultSettings
        }

        val operations = operationNames.mapNotNull {
            try {
                Operation.valueOf(it)
            } catch (_: IllegalArgumentException) {
                null
            }
        }.toSet()

        return DifficultySettings(operations, maxNumber)
    }

    fun getConsecutiveWrongAnswers(): Int {
        return prefs.getInt(KEY_CONSECUTIVE_WRONG_ANSWERS, 0)
    }

    fun incrementConsecutiveWrongAnswers() {
        val current = getConsecutiveWrongAnswers()
        prefs.edit { putInt(KEY_CONSECUTIVE_WRONG_ANSWERS, current + 1) }
    }

    fun resetConsecutiveWrongAnswers() {
        prefs.edit { putInt(KEY_CONSECUTIVE_WRONG_ANSWERS, 0) }
    }

    fun isProUser(): Boolean {
        return prefs.getBoolean(KEY_IS_PRO_USER, false)
    }

    fun setProUser(isPro: Boolean) {
        prefs.edit { putBoolean(KEY_IS_PRO_USER, isPro) }
    }

    fun getProgressData(): List<ProblemResult> {
        val dataStrings = prefs.getStringSet(KEY_PROGRESS_DATA, emptySet()) ?: emptySet()
        return dataStrings.mapNotNull { deserializeProgress(it) }.sortedByDescending { it.timestamp }
    }

    fun logProblemResult(problem: MathProblem, wasCorrect: Boolean) {
        val operation = try {
            Operation.entries.first { it.symbol == problem.operator }
        } catch (_: NoSuchElementException) {
            return
        }

        val result = ProblemResult(
            timestamp = System.currentTimeMillis(),
            operation = operation,
            wasCorrect = wasCorrect
        )

        val currentData = getProgressData().toMutableList()
        currentData.add(0, result)
        val updatedData = currentData.take(MAX_PROGRESS_ENTRIES)
        val dataStrings = updatedData.map { serializeProgress(it) }.toSet()
        prefs.edit { putStringSet(KEY_PROGRESS_DATA, dataStrings) }
    }

    private fun serializeProgress(result: ProblemResult): String {
        return "${result.timestamp}|${result.operation.name}|${result.wasCorrect}"
    }

    private fun deserializeProgress(dataString: String): ProblemResult? {
        return try {
            val parts = dataString.split('|')
            ProblemResult(
                timestamp = parts[0].toLong(),
                operation = Operation.valueOf(parts[1]),
                wasCorrect = parts[2].toBoolean()
            )
        } catch (_: Exception) {
            null
        }
    }
}
-----------------------------------------------------------------------------
File: MathHeroApplication.kt
Path: 
Content:
package io.github.galitach.mathhero

import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import io.github.galitach.mathhero.billing.BillingManager
import io.github.galitach.mathhero.data.SharedPreferencesManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob

class MathHeroApplication : Application() {

    private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)
    lateinit var billingManager: BillingManager
        private set

    override fun onCreate() {
        super.onCreate()
        SharedPreferencesManager.initialize(this)
        billingManager = BillingManager(this, applicationScope)
        createNotificationChannel()
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = getString(R.string.notification_channel_name)
            val descriptionText = getString(R.string.notification_channel_description)
            val importance = NotificationManager.IMPORTANCE_DEFAULT
            val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {
                description = descriptionText
            }
            val notificationManager: NotificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }

    companion object {
        const val CHANNEL_ID = "DAILY_RIDDLE_CHANNEL"
    }
}
-----------------------------------------------------------------------------
File: BootCompletedReceiver.kt
Path: 
Content:
package io.github.galitach.mathhero.notifications

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import io.github.galitach.mathhero.data.SharedPreferencesManager

class BootCompletedReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action == Intent.ACTION_BOOT_COMPLETED) {
            SharedPreferencesManager.initialize(context)
            if (SharedPreferencesManager.areNotificationsEnabled()) {
                NotificationScheduler.scheduleDailyNotification(context)
            }
        }
    }
}
-----------------------------------------------------------------------------
File: NotificationActionReceiver.kt
Path: 
Content:
package io.github.galitach.mathhero.notifications

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.app.Person
import androidx.core.graphics.drawable.IconCompat
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.MathHeroApplication
import io.github.galitach.mathhero.data.MathProblemRepository
import io.github.galitach.mathhero.data.SharedPreferencesManager

class NotificationActionReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val notificationManager = NotificationManagerCompat.from(context)
        notificationManager.cancel(NotificationReceiver.NOTIFICATION_ID)

        if (intent.action == ACTION_REVEAL) {
            val repository = MathProblemRepository(context, SharedPreferencesManager)
            val problem = repository.getCurrentProblem()
            val answer = problem.answer

            val heroPerson = Person.Builder()
                .setName(context.getString(R.string.app_name))
                .setIcon(IconCompat.createWithResource(context, R.drawable.ic_math_hero_logo))
                .build()

            val answerMessage = NotificationCompat.MessagingStyle.Message(
                answer,
                System.currentTimeMillis(),
                heroPerson
            )

            val messagingStyle = NotificationCompat.MessagingStyle(heroPerson)
                .setConversationTitle(context.getString(R.string.notification_answer_title))
                .addMessage(answerMessage)

            val answerNotification = NotificationCompat.Builder(context, MathHeroApplication.CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_notification_icon)
                .setStyle(messagingStyle)
                .setAutoCancel(true)
                .build()

            try {
                notificationManager.notify(ANSWER_NOTIFICATION_ID, answerNotification)
            } catch (_: SecurityException) {
                // Fails silently if permissions are revoked.
            }
        }
    }

    companion object {
        const val ACTION_REVEAL = "io.github.galitach.mathhero.ACTION_REVEAL"
        const val ACTION_DISMISS = "io.github.galitach.mathhero.ACTION_DISMISS"
        const val ANSWER_NOTIFICATION_ID = 2
    }
}
-----------------------------------------------------------------------------
File: NotificationReceiver.kt
Path: 
Content:
package io.github.galitach.mathhero.notifications

import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.app.Person
import androidx.core.content.ContextCompat
import androidx.core.graphics.drawable.IconCompat
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.MathHeroApplication
import io.github.galitach.mathhero.data.MathProblemRepository
import io.github.galitach.mathhero.data.SharedPreferencesManager
import io.github.galitach.mathhero.ui.MainActivity

class NotificationReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val repository = MathProblemRepository(context, SharedPreferencesManager)
        val problem = repository.getCurrentProblem()

        val openAppIntent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            `package` = context.packageName
        }
        val openAppPendingIntent: PendingIntent = PendingIntent.getActivity(
            context, 0, openAppIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val revealIntent = Intent(context, NotificationActionReceiver::class.java).apply {
            action = NotificationActionReceiver.ACTION_REVEAL
        }
        val revealPendingIntent = PendingIntent.getBroadcast(
            context, 1, revealIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val dismissIntent = Intent(context, NotificationActionReceiver::class.java).apply {
            action = NotificationActionReceiver.ACTION_DISMISS
        }
        val dismissPendingIntent = PendingIntent.getBroadcast(
            context, 2, dismissIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notificationText = problem.question

        val heroPerson = Person.Builder()
            .setName(context.getString(R.string.app_name))
            .setIcon(IconCompat.createWithResource(context, R.drawable.ic_math_hero_logo))
            .build()

        val message = NotificationCompat.MessagingStyle.Message(
            notificationText,
            System.currentTimeMillis(),
            heroPerson
        )

        val messagingStyle = NotificationCompat.MessagingStyle(heroPerson)
            .addMessage(message)

        val builder = NotificationCompat.Builder(context, MathHeroApplication.CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification_icon)
            .setStyle(messagingStyle)
            .setColor(ContextCompat.getColor(context, R.color.math_gold))
            .setContentIntent(openAppPendingIntent)
            .setAutoCancel(true)
            .addAction(
                NotificationCompat.Action.Builder(
                    null,
                    context.getString(R.string.notification_action_reveal),
                    revealPendingIntent
                ).build()
            )
            .addAction(
                NotificationCompat.Action.Builder(
                    null,
                    context.getString(R.string.notification_action_solved),
                    dismissPendingIntent
                ).build()
            )

        with(NotificationManagerCompat.from(context)) {
            try {
                notify(NOTIFICATION_ID, builder.build())
            } catch (_: SecurityException) {
                // Permission might have been revoked.
            }
        }
    }

    companion object {
        const val NOTIFICATION_ID = 1
    }
}
-----------------------------------------------------------------------------
File: NotificationScheduler.kt
Path: 
Content:
package io.github.galitach.mathhero.notifications

import android.Manifest
import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.content.ContextCompat
import io.github.galitach.mathhero.data.SharedPreferencesManager
import java.util.Calendar

object NotificationScheduler {

    fun scheduleDailyNotification(context: Context) {
        if (!SharedPreferencesManager.areNotificationsEnabled()) return

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(context, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {
                // Do not schedule if permission is not granted.
                return
            }
        }

        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(context, NotificationReceiver::class.java)

        val pendingIntent = PendingIntent.getBroadcast(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )

        val isAlarmUp = PendingIntent.getBroadcast(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_NO_CREATE
        ) != null

        if (isAlarmUp) {
            return
        }

        val calendar: Calendar = Calendar.getInstance().apply {
            timeInMillis = System.currentTimeMillis()
            set(Calendar.HOUR_OF_DAY, 9)
            set(Calendar.MINUTE, 0)
            set(Calendar.SECOND, 0)
        }

        if (calendar.timeInMillis <= System.currentTimeMillis()) {
            calendar.add(Calendar.DAY_OF_YEAR, 1)
        }

        alarmManager.setInexactRepeating(
            AlarmManager.RTC_WAKEUP,
            calendar.timeInMillis,
            AlarmManager.INTERVAL_DAY,
            pendingIntent
        )
    }

    fun cancelDailyNotification(context: Context) {
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(context, NotificationReceiver::class.java)
        val pendingIntent = PendingIntent.getBroadcast(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_NO_CREATE
        )
        if (pendingIntent != null) {
            alarmManager.cancel(pendingIntent)
            pendingIntent.cancel()
        }
    }
}
-----------------------------------------------------------------------------
File: ArchiveDialogFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.archive

import android.os.Build
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.DialogFragment
import androidx.recyclerview.widget.LinearLayoutManager
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.MathProblem
import io.github.galitach.mathhero.databinding.DialogArchiveBinding

class ArchiveDialogFragment : DialogFragment() {

    private var _binding: DialogArchiveBinding? = null
    private val binding get() = _binding!!

    private val archivedProblems: List<MathProblem> by lazy {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            arguments?.getParcelableArrayList(ARG_PROBLEMS, MathProblem::class.java) ?: emptyList()
        } else {
            @Suppress("DEPRECATION")
            arguments?.getParcelableArrayList(ARG_PROBLEMS) ?: emptyList()
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogArchiveBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupRecyclerView()
        binding.toolbar.setNavigationOnClickListener { dismiss() }
    }

    private fun setupRecyclerView() {
        binding.archiveRecyclerView.layoutManager = LinearLayoutManager(context)
        context?.let {
            binding.archiveRecyclerView.addItemDecoration(DividerItemDecoration(it))
        }

        if (archivedProblems.isNotEmpty()) {
            binding.archiveRecyclerView.adapter = ArchiveProblemAdapter(archivedProblems)
            binding.emptyState.visibility = View.GONE
            binding.archiveRecyclerView.visibility = View.VISIBLE
        } else {
            binding.emptyState.visibility = View.VISIBLE
            binding.archiveRecyclerView.visibility = View.GONE
        }
    }

    override fun getTheme(): Int {
        return R.style.FullScreenDialog
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "ArchiveDialogFragment"
        private const val ARG_PROBLEMS = "arg_problems"

        fun newInstance(problems: List<MathProblem>): ArchiveDialogFragment {
            return ArchiveDialogFragment().apply {
                arguments = Bundle().apply {
                    putParcelableArrayList(ARG_PROBLEMS, ArrayList(problems))
                }
            }
        }
    }
}
-----------------------------------------------------------------------------
File: ArchiveProblemAdapter.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.archive

import android.view.LayoutInflater
import android.view.ViewGroup
import android.view.animation.AccelerateDecelerateInterpolator
import androidx.recyclerview.widget.RecyclerView
import io.github.galitach.mathhero.data.MathProblem
import io.github.galitach.mathhero.databinding.ItemArchiveProblemBinding

class ArchiveProblemAdapter(private val problems: List<MathProblem>) :
    RecyclerView.Adapter<ArchiveProblemAdapter.ProblemViewHolder>() {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ProblemViewHolder {
        val binding = ItemArchiveProblemBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return ProblemViewHolder(binding)
    }

    override fun onBindViewHolder(holder: ProblemViewHolder, position: Int) {
        holder.bind(problems[position])
        holder.itemView.alpha = 0f
        holder.itemView.translationY = 50f
        holder.itemView.animate()
            .alpha(1f)
            .translationY(0f)
            .setStartDelay(position * 50L)
            .setDuration(400)
            .setInterpolator(AccelerateDecelerateInterpolator())
            .start()
    }

    override fun getItemCount(): Int = problems.size

    class ProblemViewHolder(private val binding: ItemArchiveProblemBinding) :
        RecyclerView.ViewHolder(binding.root) {
        fun bind(problem: MathProblem) {
            binding.problemText.text = problem.question
            binding.answerText.text = problem.answer
        }
    }
}
-----------------------------------------------------------------------------
File: DividerItemDecoration.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.archive

import android.content.Context
import android.graphics.Canvas
import android.graphics.drawable.Drawable
import androidx.recyclerview.widget.RecyclerView
import io.github.galitach.mathhero.R

class DividerItemDecoration(context: Context) : RecyclerView.ItemDecoration() {

    private val divider: Drawable?

    init {
        val attrs = intArrayOf(android.R.attr.listDivider)
        val styledAttributes = context.obtainStyledAttributes(attrs)
        try {
            divider = styledAttributes.getDrawable(0)
        } finally {
            styledAttributes.recycle()
        }
    }

    override fun onDraw(c: Canvas, parent: RecyclerView, state: RecyclerView.State) {
        divider?.let {
            val left = parent.paddingLeft + (parent.context.resources.getDimension(R.dimen.archive_divider_margin))
            val right = parent.width - parent.paddingRight - (parent.context.resources.getDimension(R.dimen.archive_divider_margin))

            for (i in 0 until parent.childCount - 1) {
                val child = parent.getChildAt(i)
                val params = child.layoutParams as RecyclerView.LayoutParams
                val top = child.bottom + params.bottomMargin
                val bottom = top + it.intrinsicHeight
                it.setBounds(left.toInt(), top, right.toInt(), bottom)
                it.draw(c)
            }
        }
    }
}
-----------------------------------------------------------------------------
File: DifficultySelectionDialogFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.difficulty

import android.graphics.PorterDuff
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.RadioButton
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.core.view.children
import androidx.core.widget.TextViewCompat
import androidx.fragment.app.DialogFragment
import androidx.fragment.app.activityViewModels
import com.google.android.material.chip.Chip
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.DifficultyLevel
import io.github.galitach.mathhero.data.DifficultySettings
import io.github.galitach.mathhero.data.Operation
import io.github.galitach.mathhero.data.SharedPreferencesManager
import io.github.galitach.mathhero.databinding.DialogDifficultySelectionBinding
import io.github.galitach.mathhero.ui.MainViewModel
import io.github.galitach.mathhero.ui.MainViewModelFactory

class DifficultySelectionDialogFragment : DialogFragment() {

    private var _binding: DialogDifficultySelectionBinding? = null
    private val binding get() = _binding!!

    private val viewModel: MainViewModel by activityViewModels { MainViewModelFactory }
    private var isInteracting = false // To prevent listener feedback loops

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogDifficultySelectionBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        val isFirstTime = arguments?.getBoolean(ARG_IS_FIRST_TIME) ?: false
        if (isFirstTime) {
            binding.toolbar.navigationIcon = null
            isCancelable = false
        } else {
            binding.toolbar.setNavigationOnClickListener { dismiss() }
        }

        setupViews()
        loadCurrentSettings()
        setupListeners()
    }

    private fun setupViews() {
        DifficultyLevel.entries.forEach { level ->
            val radioButton = (layoutInflater.inflate(R.layout.item_difficulty_preset, binding.presetsGroup, false) as RadioButton).apply {
                id = View.generateViewId()
                text = getString(level.titleRes)
                tag = level
                setCompoundDrawablesWithIntrinsicBounds(level.iconRes, 0, 0, 0)
                TextViewCompat.setCompoundDrawableTintList(this, ContextCompat.getColorStateList(requireContext(), R.color.selector_preset_icon_tint))
                compoundDrawableTintMode = PorterDuff.Mode.SRC_IN
            }
            binding.presetsGroup.addView(radioButton)
        }

        Operation.entries.forEach { op ->
            val chip = (layoutInflater.inflate(R.layout.chip_operation, binding.operationsGroup, false) as Chip).apply {
                id = View.generateViewId()
                text = op.name.lowercase().replaceFirstChar { it.titlecase() }
                tag = op
            }
            binding.operationsGroup.addView(chip)
        }
    }

    private fun loadCurrentSettings() {
        isInteracting = false // Disable listeners during initial population
        val settings = SharedPreferencesManager.getDifficultySettings()
        syncUiWithSettings(settings)
        isInteracting = true // Re-enable listeners
    }

    private fun setupListeners() {
        binding.presetsGroup.setOnCheckedChangeListener { group, checkedId ->
            // Only react to user interaction and actual selections (not clearCheck)
            if (!isInteracting || checkedId == View.NO_ID) return@setOnCheckedChangeListener

            val selectedButton = group.findViewById<RadioButton>(checkedId)
            val selectedPreset = selectedButton?.tag as? DifficultyLevel

            selectedPreset?.let {
                // A preset was clicked. Temporarily disable listeners to prevent feedback loops,
                // update the custom controls to match the preset, then re-enable listeners.
                isInteracting = false
                updateCustomControls(it.settings)
                isInteracting = true
            }
        }

        // When a custom control is changed by the user, clear any selected preset.
        binding.operationsGroup.children.filterIsInstance<Chip>().forEach { chip ->
            chip.setOnCheckedChangeListener { _, _ ->
                if (isInteracting) {
                    binding.presetsGroup.clearCheck()
                }
            }
        }

        binding.maxNumberSlider.addOnChangeListener { _, _, fromUser ->
            if (fromUser) {
                binding.presetsGroup.clearCheck()
            }
        }

        binding.maxNumberSlider.setLabelFormatter { value -> value.toInt().toString() }

        binding.saveButton.setOnClickListener {
            val selectedOps = binding.operationsGroup.checkedChipIds.mapNotNull { id ->
                binding.operationsGroup.findViewById<Chip>(id)?.tag as? Operation
            }.toSet()

            if (selectedOps.isEmpty()) {
                Toast.makeText(requireContext(), R.string.error_no_operation_selected, Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            val maxNumber = binding.maxNumberSlider.value.toInt()
            viewModel.onDifficultySelected(DifficultySettings(selectedOps, maxNumber))
            dismiss()
        }
    }

    /**
     * Updates only the custom controls (chips and slider) based on the given settings.
     * This is called when a preset is selected.
     */
    private fun updateCustomControls(settings: DifficultySettings) {
        binding.operationsGroup.children.filterIsInstance<Chip>().forEach { chip ->
            val operation = chip.tag as Operation
            chip.isChecked = settings.operations.contains(operation)
        }
        binding.maxNumberSlider.value = settings.maxNumber.toFloat()
    }

    /**
     * Syncs the entire UI (presets and custom controls) with the given settings.
     * This is used for the initial setup.
     */
    private fun syncUiWithSettings(settings: DifficultySettings) {
        updateCustomControls(settings)

        val matchingPreset = DifficultyLevel.entries.find { it.settings == settings }
        if (matchingPreset != null) {
            binding.presetsGroup.children.filterIsInstance<RadioButton>()
                .find { it.tag == matchingPreset }
                ?.isChecked = true
        } else {
            binding.presetsGroup.clearCheck()
        }
    }

    override fun getTheme(): Int {
        return R.style.FullScreenDialog
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "DifficultySelectionDialogFragment"
        private const val ARG_IS_FIRST_TIME = "arg_is_first_time"

        fun newInstance(isFirstTime: Boolean = false): DifficultySelectionDialogFragment {
            return DifficultySelectionDialogFragment().apply {
                arguments = Bundle().apply {
                    putBoolean(ARG_IS_FIRST_TIME, isFirstTime)
                }
            }
        }
    }
}
-----------------------------------------------------------------------------
File: HintBottomSheetFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.hint

import android.graphics.PorterDuff
import android.graphics.PorterDuffColorFilter
import android.os.Build
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import androidx.core.content.ContextCompat
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.MathProblem
import io.github.galitach.mathhero.databinding.BottomSheetHintBinding

class HintBottomSheetFragment : BottomSheetDialogFragment() {

    private var _binding: BottomSheetHintBinding? = null
    private val binding get() = _binding!!

    private val hintColors by lazy {
        listOf(
            ContextCompat.getColor(requireContext(), R.color.hint_color_1),
            ContextCompat.getColor(requireContext(), R.color.hint_color_2),
            ContextCompat.getColor(requireContext(), R.color.hint_color_3),
            ContextCompat.getColor(requireContext(), R.color.hint_color_4),
            ContextCompat.getColor(requireContext(), R.color.hint_color_5),
            ContextCompat.getColor(requireContext(), R.color.hint_color_6),
            ContextCompat.getColor(requireContext(), R.color.hint_color_7),
            ContextCompat.getColor(requireContext(), R.color.hint_color_8),
            ContextCompat.getColor(requireContext(), R.color.hint_color_9),
            ContextCompat.getColor(requireContext(), R.color.hint_color_10)
        )
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = BottomSheetHintBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val problem = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            arguments?.getParcelable(ARG_PROBLEM, MathProblem::class.java)
        } else {
            @Suppress("DEPRECATION")
            arguments?.getParcelable(ARG_PROBLEM)
        }
        renderVisualHint(problem)
    }

    private fun renderVisualHint(problem: MathProblem?) {
        problem ?: return
        binding.hintGrid.removeAllViews()

        val answer = problem.answer.toIntOrNull() ?: 0

        val totalStars = when (problem.operator) {
            "+" -> (problem.num1 + problem.num2)
            "-" -> problem.num1
            "×" -> (problem.num1 * problem.num2)
            "÷" -> problem.num1
            else -> 0
        }.coerceAtMost(100)

        val starSize = when {
            totalStars > 90 -> resources.getDimensionPixelSize(R.dimen.hint_star_size_small)
            totalStars > 70 -> resources.getDimensionPixelSize(R.dimen.hint_star_size_medium)
            else -> resources.getDimensionPixelSize(R.dimen.hint_star_size_large)
        }

        val colorAddPrimary = ContextCompat.getColor(requireContext(), R.color.hint_add_primary)
        val colorAddSecondary = ContextCompat.getColor(requireContext(), R.color.hint_add_secondary)
        val colorMuted = ContextCompat.getColor(requireContext(), R.color.colorSurfaceVariant)

        when (problem.operator) {
            "+" -> {
                binding.hintGrid.columnCount = 10
                repeat(problem.num1) { addStarToHint(colorAddPrimary, starSize) }
                repeat(problem.num2) { addStarToHint(colorAddSecondary, starSize) }
            }
            "-" -> {
                binding.hintGrid.columnCount = 10
                repeat(problem.num1) { index ->
                    val color = if (index < answer) colorAddPrimary else colorMuted
                    addStarToHint(color, starSize)
                }
            }
            "×" -> {
                binding.hintGrid.columnCount = problem.num1.coerceAtLeast(1)
                repeat(totalStars) {
                    val rowIndex = it / problem.num1
                    val color = hintColors[rowIndex % hintColors.size]
                    addStarToHint(color, starSize)
                }
            }
            "÷" -> {
                binding.hintGrid.columnCount = answer.coerceAtLeast(1)
                repeat(totalStars) {
                    val rowIndex = it / answer
                    val color = hintColors[rowIndex % hintColors.size]
                    addStarToHint(color, starSize)
                }
            }
        }
    }

    private fun addStarToHint(color: Int, starSize: Int) {
        val star = ImageView(context).apply {
            layoutParams =
                android.widget.GridLayout.LayoutParams().apply {
                    width = 0
                    height = starSize
                    columnSpec = android.widget.GridLayout.spec(android.widget.GridLayout.UNDEFINED, 1f)
                    setMargins(2, 2, 2, 2)
                }
            setImageResource(R.drawable.ic_star_filled)
            colorFilter = PorterDuffColorFilter(color, PorterDuff.Mode.SRC_IN)
        }
        binding.hintGrid.addView(star)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "HintBottomSheetFragment"
        private const val ARG_PROBLEM = "arg_problem"

        fun newInstance(problem: MathProblem): HintBottomSheetFragment {
            return HintBottomSheetFragment().apply {
                arguments = Bundle().apply {
                    putParcelable(ARG_PROBLEM, problem)
                }
            }
        }
    }
}
-----------------------------------------------------------------------------
File: HintDialogFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.hint

import android.graphics.Color
import android.graphics.PorterDuff
import android.graphics.PorterDuffColorFilter
import android.graphics.drawable.ColorDrawable
import android.os.Build
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.Window
import android.widget.ImageView
import androidx.core.content.ContextCompat
import androidx.fragment.app.DialogFragment
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.MathProblem
import io.github.galitach.mathhero.databinding.DialogHintBinding

class HintDialogFragment : DialogFragment() {

    private var _binding: DialogHintBinding? = null
    private val binding get() = _binding!!

    private val hintColors by lazy {
        listOf(
            ContextCompat.getColor(requireContext(), R.color.hint_color_1),
            ContextCompat.getColor(requireContext(), R.color.hint_color_2),
            ContextCompat.getColor(requireContext(), R.color.hint_color_3),
            ContextCompat.getColor(requireContext(), R.color.hint_color_4),
            ContextCompat.getColor(requireContext(), R.color.hint_color_5),
            ContextCompat.getColor(requireContext(), R.color.hint_color_6),
            ContextCompat.getColor(requireContext(), R.color.hint_color_7),
            ContextCompat.getColor(requireContext(), R.color.hint_color_8),
            ContextCompat.getColor(requireContext(), R.color.hint_color_9),
            ContextCompat.getColor(requireContext(), R.color.hint_color_10)
        )
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogHintBinding.inflate(inflater, container, false)
        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
        dialog?.window?.requestFeature(Window.FEATURE_NO_TITLE)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val problem = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            arguments?.getParcelable(ARG_PROBLEM, MathProblem::class.java)
        } else {
            @Suppress("DEPRECATION")
            arguments?.getParcelable(ARG_PROBLEM)
        }
        renderVisualHint(problem)

        binding.root.setOnClickListener {
            dismiss()
        }
    }

    override fun onStart() {
        super.onStart()
        dialog?.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)
    }

    private fun renderVisualHint(problem: MathProblem?) {
        problem ?: return
        binding.hintGrid.removeAllViews()

        val answer = problem.answer.toIntOrNull() ?: 0

        val totalStars = when (problem.operator) {
            "+" -> (problem.num1 + problem.num2)
            "-" -> problem.num1
            "×" -> (problem.num1 * problem.num2)
            "÷" -> problem.num1
            else -> 0
        }.coerceAtMost(100)

        val starSize = when {
            totalStars > 90 -> resources.getDimensionPixelSize(R.dimen.hint_star_size_small)
            totalStars > 70 -> resources.getDimensionPixelSize(R.dimen.hint_star_size_medium)
            else -> resources.getDimensionPixelSize(R.dimen.hint_star_size_large)
        }

        val colorAddPrimary = ContextCompat.getColor(requireContext(), R.color.hint_add_primary)
        val colorAddSecondary = ContextCompat.getColor(requireContext(), R.color.hint_add_secondary)
        val colorMuted = ContextCompat.getColor(requireContext(), R.color.colorSurfaceVariant)

        when (problem.operator) {
            "+" -> {
                binding.hintGrid.columnCount = 10
                repeat(problem.num1) { addStarToHint(colorAddPrimary, starSize) }
                repeat(problem.num2) { addStarToHint(colorAddSecondary, starSize) }
            }
            "-" -> {
                binding.hintGrid.columnCount = 10
                repeat(problem.num1) { index ->
                    val color = if (index < answer) colorAddPrimary else colorMuted
                    addStarToHint(color, starSize)
                }
            }
            "×" -> {
                binding.hintGrid.columnCount = problem.num1.coerceAtLeast(1)
                repeat(totalStars) {
                    val rowIndex = it / problem.num1
                    val color = hintColors[rowIndex % hintColors.size]
                    addStarToHint(color, starSize)
                }
            }
            "÷" -> {
                binding.hintGrid.columnCount = answer.coerceAtLeast(1)
                repeat(totalStars) {
                    val rowIndex = it / answer
                    val color = hintColors[rowIndex % hintColors.size]
                    addStarToHint(color, starSize)
                }
            }
        }
    }

    private fun addStarToHint(color: Int, starSize: Int) {
        val star = ImageView(context).apply {
            layoutParams =
                android.widget.GridLayout.LayoutParams().apply {
                    width = 0
                    height = starSize
                    columnSpec = android.widget.GridLayout.spec(android.widget.GridLayout.UNDEFINED, 1f)
                    setMargins(2, 2, 2, 2)
                }
            setImageResource(R.drawable.ic_star_filled)
            colorFilter = PorterDuffColorFilter(color, PorterDuff.Mode.SRC_IN)
        }
        binding.hintGrid.addView(star)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "HintDialogFragment"
        private const val ARG_PROBLEM = "arg_problem"

        fun newInstance(problem: MathProblem): HintDialogFragment {
            return HintDialogFragment().apply {
                arguments = Bundle().apply {
                    putParcelable(ARG_PROBLEM, problem)
                }
            }
        }
    }
}
-----------------------------------------------------------------------------
File: MainActivity.kt
Path: 
Content:
package io.github.galitach.mathhero.ui

import android.Manifest
import android.app.Activity
import android.content.ActivityNotFoundException
import android.content.Intent
import android.media.MediaPlayer
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.util.TypedValue
import android.view.HapticFeedbackConstants
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.animation.AccelerateDecelerateInterpolator
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.viewModels
import androidx.annotation.AttrRes
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.net.toUri
import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen
import androidx.core.view.children
import androidx.core.view.isVisible
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import com.google.android.gms.ads.AdRequest
import com.google.android.gms.ads.FullScreenContentCallback
import com.google.android.gms.ads.LoadAdError
import com.google.android.gms.ads.MobileAds
import com.google.android.gms.ads.rewarded.RewardedAd
import com.google.android.gms.ads.rewarded.RewardedAdLoadCallback
import com.google.android.gms.oss.licenses.OssLicensesMenuActivity
import com.google.android.material.button.MaterialButton
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.play.core.appupdate.AppUpdateManager
import com.google.android.play.core.appupdate.AppUpdateManagerFactory
import com.google.android.play.core.appupdate.AppUpdateOptions
import com.google.android.play.core.install.model.AppUpdateType
import com.google.android.play.core.install.model.UpdateAvailability
import com.google.android.play.core.ktx.isImmediateUpdateAllowed
import com.google.android.play.core.ktx.requestAppUpdateInfo
import com.google.android.ump.ConsentInformation
import com.google.android.ump.ConsentRequestParameters
import com.google.android.ump.UserMessagingPlatform
import io.github.galitach.mathhero.MathHeroApplication
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.billing.BillingManager
import io.github.galitach.mathhero.data.SharedPreferencesManager
import io.github.galitach.mathhero.databinding.ActivityMainBinding
import io.github.galitach.mathhero.notifications.NotificationScheduler
import io.github.galitach.mathhero.ui.archive.ArchiveDialogFragment
import io.github.galitach.mathhero.ui.difficulty.DifficultySelectionDialogFragment
import io.github.galitach.mathhero.ui.hint.HintDialogFragment
import io.github.galitach.mathhero.ui.progress.ProgressDialogFragment
import io.github.galitach.mathhero.ui.ranks.RanksDialogFragment
import io.github.galitach.mathhero.ui.settings.SettingsDialogFragment
import java.util.concurrent.TimeUnit
import java.util.concurrent.atomic.AtomicBoolean
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.distinctUntilChanged
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import nl.dionsegijn.konfetti.core.Party
import nl.dionsegijn.konfetti.core.Position
import nl.dionsegijn.konfetti.core.emitter.Emitter

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private val viewModel: MainViewModel by viewModels { MainViewModelFactory }
    private lateinit var billingManager: BillingManager

    private lateinit var consentInformation: ConsentInformation
    private val isMobileAdsInitializeCalled = AtomicBoolean(false)

    private var saveStreakRewardedAd: RewardedAd? = null

    private var correctSoundPlayer: MediaPlayer? = null
    private var incorrectSoundPlayer: MediaPlayer? = null

    private lateinit var appUpdateManager: AppUpdateManager
    private val appUpdateResultLauncher = registerForActivityResult(
        ActivityResultContracts.StartIntentSenderForResult()
    ) { result ->
        if (result.resultCode != Activity.RESULT_OK) {
            Log.w("MainActivity", "Update flow failed! Result code: " + result.resultCode)
        }
    }

    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                enableNotifications(true)
            } else {
                enableNotifications(false)
                Toast.makeText(this, getString(R.string.notifications_disabled_toast), Toast.LENGTH_LONG).show()
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        installSplashScreen()
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        setSupportActionBar(binding.toolbar)

        billingManager = (application as MathHeroApplication).billingManager
        appUpdateManager = AppUpdateManagerFactory.create(applicationContext)
        checkForAppUpdates()

        setupSoundPlayers()
        setupClickListeners()
        setupConsentAndAds() // This needs to be called on every launch.

        handleOnboardingIfNeeded()
        observeUiState()
        animateContentIn()
    }

    private fun setupSoundPlayers() {
        correctSoundPlayer = MediaPlayer.create(this, R.raw.riddle_complete)
        incorrectSoundPlayer = MediaPlayer.create(this, R.raw.incorrect_answer)
    }

    private fun animateContentIn() {
        binding.mainContent.alpha = 0f
        binding.mainContent.translationY = 50f
        binding.mainContent.animate()
            .alpha(1f)
            .translationY(0f)
            .setStartDelay(300)
            .setDuration(500)
            .setInterpolator(AccelerateDecelerateInterpolator())
            .start()
    }

    private fun setupConsentAndAds() {
        if (SharedPreferencesManager.isProUser()) {
            binding.adViewContainer.visibility = View.GONE
            return
        }

        val params = ConsentRequestParameters.Builder().build()
        consentInformation = UserMessagingPlatform.getConsentInformation(this)
        consentInformation.requestConsentInfoUpdate(
            this,
            params,
            { UserMessagingPlatform.loadAndShowConsentFormIfRequired(this) { _ ->
                if (consentInformation.canRequestAds()) initializeMobileAds()
            }
            },
            { formError ->
                Log.w("MainActivity", "Consent form error: ${formError.message}")
            }
        )
        if (consentInformation.canRequestAds()) initializeMobileAds()
    }

    private fun initializeMobileAds() {
        if (SharedPreferencesManager.isProUser()) return
        if (isMobileAdsInitializeCalled.getAndSet(true)) return
        MobileAds.initialize(this) {
            loadBannerAd()
            loadSaveStreakRewardedAd()
        }
    }

    private fun handleOnboardingIfNeeded() {
        if (!SharedPreferencesManager.isOnboardingCompleted()) {
            showDisclaimerDialog()
        }
    }

    private fun showDisclaimerDialog() {
        MaterialAlertDialogBuilder(this)
            .setTitle(R.string.disclaimer_title)
            .setMessage(R.string.disclaimer_message)
            .setPositiveButton(android.R.string.ok) { dialog, _ ->
                dialog.dismiss()
                showNotificationPrimerDialog()
            }
            .setCancelable(false)
            .show()
    }

    private fun showNotificationPrimerDialog() {
        val onFinishOnboarding = {
            SharedPreferencesManager.setOnboardingCompleted()
            if (viewModel.uiState.value.needsDifficultySelection) {
                showDifficultySelectionDialog()
            }
        }

        MaterialAlertDialogBuilder(this)
            .setTitle(R.string.notification_primer_title)
            .setMessage(R.string.notification_primer_message)
            .setPositiveButton(R.string.notification_primer_positive) { dialog, _ ->
                dialog.dismiss()
                requestNotificationPermission()
                onFinishOnboarding()
            }
            .setNegativeButton(R.string.notification_primer_negative) { dialog, _ ->
                enableNotifications(false)
                dialog.dismiss()
                onFinishOnboarding()
            }
            .setCancelable(false)
            .show()
    }

    private fun showDifficultySelectionDialog() {
        if (supportFragmentManager.findFragmentByTag(DifficultySelectionDialogFragment.TAG) == null) {
            DifficultySelectionDialogFragment.newInstance(isFirstTime = true)
                .show(supportFragmentManager, DifficultySelectionDialogFragment.TAG)
        }
    }

    private fun requestNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
        } else {
            enableNotifications(true)
        }
    }

    private fun enableNotifications(enabled: Boolean) {
        SharedPreferencesManager.setNotificationsEnabled(enabled)
        if (enabled) {
            NotificationScheduler.scheduleDailyNotification(this)
        } else {
            NotificationScheduler.cancelDailyNotification(this)
        }
    }

    private fun setupClickListeners() {
        binding.heroCard.setOnClickListener { view ->
            view.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP)
            val dialog = RanksDialogFragment.newInstance(viewModel.uiState.value.highestStreakCount)
            dialog.show(supportFragmentManager, RanksDialogFragment.TAG)
        }

        binding.buttonHint.setOnClickListener { it.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP); viewModel.onHintClicked() }
        binding.buttonConfirmAnswer.setOnClickListener { it.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP); viewModel.onConfirmAnswerClicked() }
        binding.buttonShare.setOnClickListener { it.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP); shareProblem() }
        binding.nextProblemButton.setOnClickListener {
            it.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP)
            viewModel.onNextProblemRequested()
        }
        binding.buttonInfo.setOnClickListener {
            it.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP)
            showExplanation()
        }
        binding.multipleChoiceGroup.addOnButtonCheckedListener { group, checkedId, isChecked ->
            if (isChecked) {
                group.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP)
                val checkedButton = group.findViewById<MaterialButton>(checkedId)
                viewModel.onMultipleChoiceAnswerSelected(checkedButton.text.toString())
            } else {
                if (group.checkedButtonId == View.NO_ID) {
                    viewModel.onAnswerSelectionCleared()
                }
            }
        }
    }
    private fun showExplanation() {
        viewModel.uiState.value.problem?.explanation?.let { explanation ->
            MaterialAlertDialogBuilder(this)
                .setTitle(R.string.explanation_title)
                .setMessage(explanation)
                .setPositiveButton(android.R.string.ok, null)
                .show()
        }
    }
    private fun observeUiState() {
        lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.uiState.collect { state ->
                    updateProblemUI(state)
                    updateGamificationUI(state)
                    updateButtonStates(state)
                    updateAnswerUI(state)

                    // This observer handles cases where difficulty is not set on a subsequent app launch (e.g., cleared data)
                    if (state.needsDifficultySelection && SharedPreferencesManager.isOnboardingCompleted()) {
                        showDifficultySelectionDialog()
                    }
                }
            }
        }
        lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.oneTimeEvent.onEach { event ->
                    when (event) {
                        is OneTimeEvent.LaunchPurchaseFlow -> billingManager.launchPurchaseFlow(this@MainActivity)
                        is OneTimeEvent.ShowHintDialog -> {
                            if (supportFragmentManager.findFragmentByTag(HintDialogFragment.TAG) == null) {
                                HintDialogFragment.newInstance(event.problem)
                                    .show(supportFragmentManager, HintDialogFragment.TAG)
                            }
                        }
                    }
                }.launchIn(this)

                viewModel.uiState.map { it.playSoundEvent }.distinctUntilChanged().collect { event ->
                    event?.let {
                        playSound(it)
                        viewModel.onSoundEventHandled()
                    }
                }
                viewModel.uiState.map { it.triggerWinAnimation }.distinctUntilChanged().collect { trigger ->
                    if (trigger) {
                        triggerWinEffects()
                        viewModel.onWinAnimationComplete()
                    }
                }
                viewModel.uiState.map { it.triggerRankUpAnimation }.distinctUntilChanged().collect { trigger ->
                    if (trigger) {
                        triggerRankUpEffects()
                        viewModel.onRankUpAnimationComplete()
                    }
                }
                viewModel.uiState.map { it.showSaveStreakDialog }.distinctUntilChanged().collect { show ->
                    if (show) showSaveStreakDialog()
                }
                viewModel.uiState.map { it.showSuggestLowerDifficultyDialog }.distinctUntilChanged().collect { show ->
                    if (show) showSuggestLowerDifficultyDialog()
                }
                viewModel.uiState.map { it.isPro }.distinctUntilChanged().collect { isPro ->
                    handleProStatusChange(isPro)
                }
                viewModel.uiState.map { it.showStreakSavedToast }.distinctUntilChanged().collect { show ->
                    if (show) {
                        Toast.makeText(this@MainActivity, R.string.streak_saved_pro, Toast.LENGTH_SHORT).show()
                        viewModel.onStreakSaveToastShown()
                    }
                }
            }
        }
    }

    private fun handleProStatusChange(isPro: Boolean) {
        if (isPro) {
            binding.adViewContainer.visibility = View.GONE
            saveStreakRewardedAd = null
        } else {
            binding.adViewContainer.visibility = View.VISIBLE
            initializeMobileAds()
        }
        updateNextProblemButton()
    }

    private fun updateProblemUI(state: UiState) {
        binding.mainContent.isVisible = state.problem != null
        binding.problemText.text = state.problem?.question ?: getString(R.string.no_problem_available)
        binding.difficultyRating.rating = state.problem?.difficulty?.toFloat() ?: 0f
    }

    private fun updateGamificationUI(state: UiState) {
        state.currentRank?.let {
            binding.heroImage.setImageResource(it.imageRes)
            binding.rankNameText.setText(it.nameRes)
        }
        state.difficultyDescription?.let {
            binding.difficultyText.text = it
            binding.statusContainer.visibility = View.VISIBLE
        } ?: run {
            binding.statusContainer.visibility = View.GONE
        }

        if (state.streakCount > 0) {
            binding.streakCounter.text = state.streakCount.toString()
            binding.streakCounter.visibility = View.VISIBLE
            binding.streakIcon.visibility = View.VISIBLE
        } else {
            binding.streakCounter.visibility = View.GONE
            binding.streakIcon.visibility = View.GONE
        }
    }

    private fun updateButtonStates(state: UiState) {
        updateVisibility(binding.preAnswerActionsContainer, !state.isAnswerRevealed)
        updateVisibility(binding.postAnswerActionsContainer, state.isAnswerRevealed)
        updateVisibility(binding.buttonInfo, state.isAnswerRevealed && !state.problem?.explanation.isNullOrEmpty())

        val isAnswerSelected = state.selectedAnswer != null
        binding.hintButtonContainer.visibility = if (isAnswerSelected) View.INVISIBLE else View.VISIBLE
        binding.buttonConfirmAnswer.visibility = if (isAnswerSelected) View.VISIBLE else View.GONE

        updateNextProblemButton()
    }

    private fun updateAnswerUI(state: UiState) {
        if (state.isAnswerRevealed) {
            highlightMultipleChoiceAnswers(state)
        } else {
            resetMultipleChoiceButtonStates()
            binding.multipleChoiceGroup.children.filterIsInstance<MaterialButton>()
                .forEachIndexed { index, button ->
                    button.text = state.shuffledAnswers.getOrNull(index) ?: ""
                }
            updateMultipleChoiceSelection(state)
        }
    }

    private fun playSound(event: SoundEvent) {
        if (!SharedPreferencesManager.isSoundEnabled()) return
        when (event) {
            is SoundEvent.Correct -> correctSoundPlayer?.start()
            is SoundEvent.Incorrect -> incorrectSoundPlayer?.start()
        }
    }

    private fun updateNextProblemButton() {
        binding.nextProblemButton.setText(R.string.next_problem)
        binding.nextProblemButton.icon = null
        binding.nextProblemButton.isEnabled = true
    }

    private fun getThemeColor(@AttrRes colorAttr: Int): Int {
        val typedValue = TypedValue()
        theme.resolveAttribute(colorAttr, typedValue, true)
        return typedValue.data
    }

    private fun triggerWinEffects() {
        val party = Party(
            speed = 0f,
            maxSpeed = 30f,
            damping = 0.9f,
            spread = 360,
            colors = listOf(0x765B22, 0xC2A661, 0x496546), // Dark Gold, Bright Gold, Green
            emitter = Emitter(duration = 100, TimeUnit.MILLISECONDS).max(100),
            position = Position.Relative(0.5, 0.3)
        )
        binding.konfettiView.start(party)
    }

    private fun triggerRankUpEffects() {
        val party = Party(
            speed = 10f,
            maxSpeed = 50f,
            damping = 0.9f,
            spread = 360,
            colors = listOf(0x765B22, 0xC2A661, 0x496546, 0xBA1A1A), // Dark Gold, Bright Gold, Green, Red
            emitter = Emitter(duration = 2, TimeUnit.SECONDS).perSecond(300),
            position = Position.Relative(0.5, -0.1)
        )
        binding.konfettiView.start(party)

        viewModel.uiState.value.currentRank?.let { rank ->
            MaterialAlertDialogBuilder(this)
                .setTitle(R.string.rank_up_title)
                .setMessage(getString(R.string.rank_up_message, getString(rank.nameRes)))
                .setPositiveButton(android.R.string.ok, null)
                .show()
        }
    }

    private fun highlightMultipleChoiceAnswers(state: UiState) {
        if (!state.isAnswerRevealed) return
        val correctAnswer = state.problem?.answer
        binding.multipleChoiceGroup.children.filterIsInstance<MaterialButton>().forEach { button ->
            button.isEnabled = false
            when {
                button.text == correctAnswer -> {
                    button.setStrokeColorResource(R.color.correct_green)
                    button.strokeWidth = 4
                }
                button.text == state.selectedAnswer && state.selectedAnswer != correctAnswer -> {
                    button.setStrokeColorResource(R.color.incorrect_red)
                    button.strokeWidth = 4
                }
                else -> {
                    button.strokeWidth = 2
                    button.alpha = 0.5f
                }
            }
        }
    }

    private fun updateMultipleChoiceSelection(state: UiState) {
        if (state.isAnswerRevealed) return
        binding.multipleChoiceGroup.isEnabled = true
        val selectedButton = binding.multipleChoiceGroup.children
            .filterIsInstance<MaterialButton>()
            .find { it.text == state.selectedAnswer }

        if (selectedButton != null && binding.multipleChoiceGroup.checkedButtonId != selectedButton.id) {
            binding.multipleChoiceGroup.check(selectedButton.id)
        } else if (state.selectedAnswer == null && binding.multipleChoiceGroup.checkedButtonId != View.NO_ID) {
            binding.multipleChoiceGroup.clearChecked()
        }
    }

    private fun resetMultipleChoiceButtonStates() {
        binding.multipleChoiceGroup.clearChecked()
        binding.multipleChoiceGroup.children.filterIsInstance<MaterialButton>().forEach { button ->
            button.isEnabled = true
            button.strokeWidth = 2
            button.setStrokeColorResource(R.color.colorOutline)
            button.alpha = 1.0f
        }
    }

    private fun updateVisibility(view: View, isVisible: Boolean) {
        val currentVisibility = view.isVisible
        if (currentVisibility == isVisible) return

        if (isVisible) {
            view.alpha = 0f
            view.visibility = View.VISIBLE
            view.animate().alpha(1f).setDuration(300).start()
        } else {
            view.animate().alpha(0f).setDuration(300).withEndAction {
                view.visibility = View.GONE
            }.start()
        }
    }

    private fun shareProblem() {
        viewModel.uiState.value.problem?.question?.let { problemText ->
            val appName = getString(R.string.app_name)
            val playStoreUrl = "https://play.google.com/store/apps/details?id=$packageName"
            val shareText = if (viewModel.uiState.value.isAnswerRevealed) {
                getString(R.string.share_solved_format, problemText, appName, playStoreUrl)
            } else {
                getString(R.string.share_unsolved_format, appName, problemText, playStoreUrl)
            }

            val shareIntent = Intent().apply {
                action = Intent.ACTION_SEND
                putExtra(Intent.EXTRA_TEXT, shareText)
                type = "text/plain"
            }
            startActivity(Intent.createChooser(shareIntent, getString(R.string.share_problem_title)))
        }
    }

    private fun loadBannerAd() = binding.adView.loadAd(AdRequest.Builder().build())

    private fun loadSaveStreakRewardedAd() {
        viewModel.setSaveStreakAdLoaded(false)
        RewardedAd.load(this, "ca-app-pub-9478542207288731/1649009341", AdRequest.Builder().build(),
            object : RewardedAdLoadCallback() {
                override fun onAdLoaded(ad: RewardedAd) {
                    saveStreakRewardedAd = ad
                    viewModel.setSaveStreakAdLoaded(true)
                }
                override fun onAdFailedToLoad(adError: LoadAdError) {
                    saveStreakRewardedAd = null
                    viewModel.setSaveStreakAdLoaded(false)
                }
            })
    }

    private fun showSaveStreakRewardedAd() {
        saveStreakRewardedAd?.fullScreenContentCallback = object : FullScreenContentCallback() {
            override fun onAdDismissedFullScreenContent() {
                saveStreakRewardedAd = null
                loadSaveStreakRewardedAd()
            }
        }
        saveStreakRewardedAd?.show(this) {
            viewModel.onStreakSavedByAd()
        } ?: Toast.makeText(this, getString(R.string.bonus_problem_not_available), Toast.LENGTH_SHORT).show()
    }

    private fun showSaveStreakDialog() {
        val isPro = viewModel.uiState.value.isPro
        val builder = MaterialAlertDialogBuilder(this)
            .setTitle(R.string.save_streak_dialog_title)
            .setMessage(R.string.save_streak_dialog_message)
            .setNegativeButton(R.string.save_streak_dialog_negative_button) { _, _ ->
                viewModel.onStreakResetConfirmed()
            }
            .setCancelable(false)

        if (isPro) {
            builder.setPositiveButton(R.string.save_streak_dialog_positive_button_pro) { _, _ ->
                viewModel.onStreakSaveCompleted()
            }
        } else {
            builder.setPositiveButton(R.string.save_streak_dialog_positive_button) { _, _ ->
                showSaveStreakRewardedAd()
            }
        }

        val dialog = builder.create()
        var adStateObserverJob: Job? = null

        dialog.setOnShowListener {
            val positiveButton = dialog.getButton(AlertDialog.BUTTON_POSITIVE)
            if (!isPro) {
                adStateObserverJob = lifecycleScope.launch {
                    viewModel.uiState.map { it.isSaveStreakAdLoaded }.distinctUntilChanged().collect { isLoaded ->
                        positiveButton.isEnabled = isLoaded
                    }
                }
            }
        }
        dialog.setOnDismissListener {
            adStateObserverJob?.cancel()
        }
        dialog.show()
    }

    private fun showSuggestLowerDifficultyDialog() {
        MaterialAlertDialogBuilder(this)
            .setTitle(R.string.suggest_lower_difficulty_title)
            .setMessage(R.string.suggest_lower_difficulty_message)
            .setPositiveButton(R.string.change_difficulty) { _, _ ->
                viewModel.onSuggestLowerDifficultyDismissed()
                DifficultySelectionDialogFragment.newInstance()
                    .show(supportFragmentManager, DifficultySelectionDialogFragment.TAG)
            }
            .setNegativeButton(R.string.keep_going) { _, _ ->
                viewModel.onSuggestLowerDifficultyDismissed()
            }
            .setCancelable(false)
            .show()
    }

    private fun openStoreForRating() {
        try {
            startActivity(Intent(Intent.ACTION_VIEW, "market://details?id=$packageName".toUri()))
        } catch (_: ActivityNotFoundException) {
            startActivity(Intent(Intent.ACTION_VIEW,
                "https://play.google.com/store/apps/details?id=$packageName".toUri()))
        }
    }

    private fun checkForAppUpdates() {
        lifecycleScope.launch {
            try {
                val appUpdateInfo = appUpdateManager.requestAppUpdateInfo()
                if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE &&
                    appUpdateInfo.isImmediateUpdateAllowed
                ) {
                    appUpdateManager.startUpdateFlowForResult(
                        appUpdateInfo,
                        appUpdateResultLauncher,
                        AppUpdateOptions.newBuilder(AppUpdateType.IMMEDIATE).build()
                    )
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "Failed to check for app update.", e)
            }
        }
    }

    override fun onResume() {
        super.onResume()
        lifecycleScope.launch {
            try {
                val appUpdateInfo = appUpdateManager.requestAppUpdateInfo()
                if (appUpdateInfo.updateAvailability() == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {
                    appUpdateManager.startUpdateFlowForResult(
                        appUpdateInfo,
                        appUpdateResultLauncher,
                        AppUpdateOptions.newBuilder(AppUpdateType.IMMEDIATE).build()
                    )
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "Failed to check for app update in onResume.", e)
            }
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.main_menu, menu)
        lifecycleScope.launch {
            viewModel.uiState.map { it.isPro }.distinctUntilChanged().collect {
                invalidateOptionsMenu()
            }
        }
        return true
    }

    override fun onPrepareOptionsMenu(menu: Menu): Boolean {
        val upgradeItem = menu.findItem(R.id.action_upgrade_pro)
        upgradeItem?.isVisible = !viewModel.uiState.value.isPro
        return super.onPrepareOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_archive -> {
                val dialog = ArchiveDialogFragment.newInstance(viewModel.uiState.value.archivedProblems)
                dialog.show(supportFragmentManager, ArchiveDialogFragment.TAG)
                true
            }
            R.id.action_difficulty -> {
                DifficultySelectionDialogFragment.newInstance()
                    .show(supportFragmentManager, DifficultySelectionDialogFragment.TAG)
                true
            }
            R.id.action_rate_app -> {
                openStoreForRating()
                true
            }
            R.id.action_settings -> {
                SettingsDialogFragment().show(supportFragmentManager, SettingsDialogFragment.TAG)
                true
            }
            R.id.action_licenses -> {
                startActivity(Intent(this, OssLicensesMenuActivity::class.java))
                true
            }
            R.id.action_progress -> {
                ProgressDialogFragment.newInstance().show(supportFragmentManager, ProgressDialogFragment.TAG)
                true
            }
            R.id.action_upgrade_pro -> {
                viewModel.initiatePurchaseFlow()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        correctSoundPlayer?.release()
        incorrectSoundPlayer?.release()
        correctSoundPlayer = null
        incorrectSoundPlayer = null
    }
}
-----------------------------------------------------------------------------
File: MainViewModel.kt
Path: 
Content:
package io.github.galitach.mathhero.ui

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.viewModelScope
import com.android.billingclient.api.ProductDetails
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.billing.BillingManager
import io.github.galitach.mathhero.data.DifficultyLevel
import io.github.galitach.mathhero.data.DifficultySettings
import io.github.galitach.mathhero.data.MathProblem
import io.github.galitach.mathhero.data.MathProblemRepository
import io.github.galitach.mathhero.data.Rank
import io.github.galitach.mathhero.data.SharedPreferencesManager
import java.util.Calendar
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

sealed class SoundEvent {
    object Correct : SoundEvent()
    object Incorrect : SoundEvent()
}

sealed class OneTimeEvent {
    data class LaunchPurchaseFlow(val productDetails: ProductDetails) : OneTimeEvent()
    data class ShowHintDialog(val problem: MathProblem) : OneTimeEvent()
}

data class UiState(
    val problem: MathProblem? = null,
    val isDailyProblemSolved: Boolean = false,
    val showMultipleChoice: Boolean = true,
    val shuffledAnswers: List<String> = emptyList(),
    val selectedAnswer: String? = null,
    val isAnswerRevealed: Boolean = false,
    val archivedProblems: List<MathProblem> = emptyList(),
    val isSaveStreakAdLoaded: Boolean = false,
    val showSaveStreakDialog: Boolean = false,
    val streakCount: Int = 0,
    val highestStreakCount: Int = 0,
    val triggerWinAnimation: Boolean = false,
    val triggerRankUpAnimation: Boolean = false,
    val currentRank: Rank? = null,
    val needsDifficultySelection: Boolean = false,
    val showSuggestLowerDifficultyDialog: Boolean = false,
    val difficultyDescription: String? = null,
    val playSoundEvent: SoundEvent? = null,
    val isPro: Boolean = false,
    val showStreakSavedToast: Boolean = false,
    val proProductDetails: ProductDetails? = null
)

class MainViewModel(
    application: Application,
    private val savedStateHandle: SavedStateHandle,
    private val billingManager: BillingManager
) : AndroidViewModel(application) {

    private val repository: MathProblemRepository
    private var dailyProblemId: Int = -1

    private val _uiState = MutableStateFlow(UiState())
    val uiState: StateFlow<UiState> = _uiState.asStateFlow()

    private val _oneTimeEvent = MutableSharedFlow<OneTimeEvent>()
    val oneTimeEvent = _oneTimeEvent.asSharedFlow()

    init {
        repository = MathProblemRepository(application, SharedPreferencesManager)
        dailyProblemId = Calendar.getInstance().get(Calendar.DAY_OF_YEAR)

        val needsSelection = !SharedPreferencesManager.isDifficultySet()
        _uiState.update { it.copy(needsDifficultySelection = needsSelection) }

        observeBillingChanges()

        if (!needsSelection) {
            initializeProblem()
        }
    }

    private fun observeBillingChanges() {
        billingManager.isPro
            .onEach { isPro ->
                _uiState.update { it.copy(isPro = isPro) }
                if (isPro) {
                    SharedPreferencesManager.setProUser(true)
                }
            }
            .launchIn(viewModelScope)

        billingManager.productDetails
            .onEach { details ->
                _uiState.update { it.copy(proProductDetails = details) }
            }
            .launchIn(viewModelScope)
    }

    private fun initializeProblem() {
        val dailyProblem = repository.getCurrentProblem()
        val isDailyProblemAlreadySolved = SharedPreferencesManager.getArchivedProblems().any { it.id == dailyProblemId }

        val problemToLoad = if (isDailyProblemAlreadySolved) {
            repository.getBonusProblem()
        } else {
            dailyProblem
        }

        loadInitialState(problemToLoad, isDailyProblemAlreadySolved, clearSavedState = isDailyProblemAlreadySolved)
    }

    private fun loadInitialState(problem: MathProblem?, isDailySolved: Boolean, clearSavedState: Boolean) {
        if (clearSavedState) {
            savedStateHandle.keys().forEach { key -> savedStateHandle.remove<Any>(key) }
        }

        val shuffledAnswers = savedStateHandle.get<List<String>>(KEY_SHUFFLED_ANSWERS)
            ?: problem?.let { listOf(it.answer, it.distractor1, it.distractor2).shuffled() }
            ?: emptyList()

        if (!savedStateHandle.contains(KEY_SHUFFLED_ANSWERS)) {
            savedStateHandle[KEY_SHUFFLED_ANSWERS] = shuffledAnswers
        }

        val highestStreak = SharedPreferencesManager.getHighestStreakCount()
        val difficultySettings = SharedPreferencesManager.getDifficultySettings()

        _uiState.update {
            it.copy(
                problem = problem,
                isDailyProblemSolved = isDailySolved,
                shuffledAnswers = shuffledAnswers,
                selectedAnswer = savedStateHandle.get<String>(KEY_SELECTED_ANSWER),
                isAnswerRevealed = savedStateHandle.get<Boolean>(KEY_IS_ANSWER_REVEALED) ?: false,
                archivedProblems = repository.getArchivedProblems(),
                streakCount = SharedPreferencesManager.getStreakCount(),
                highestStreakCount = highestStreak,
                currentRank = Rank.getRankForStreak(highestStreak),
                difficultyDescription = generateDifficultyDescription(difficultySettings)
            )
        }
    }

    fun onDifficultySelected(settings: DifficultySettings) {
        SharedPreferencesManager.saveDifficultySettings(settings)
        _uiState.update {
            it.copy(
                needsDifficultySelection = false,
                difficultyDescription = generateDifficultyDescription(settings)
            )
        }
        val newProblem = repository.getCurrentProblem()
        loadNewProblem(newProblem)
    }

    private fun generateDifficultyDescription(settings: DifficultySettings): String {
        val matchingLevel = DifficultyLevel.entries.find { it.settings == settings }
        if (matchingLevel != null) {
            return getApplication<Application>().getString(matchingLevel.titleRes)
        }

        val ops = settings.operations.sortedBy { it.ordinal }.joinToString(", ") { it.symbol }
        return getApplication<Application>().getString(R.string.custom_difficulty_desc, ops, settings.maxNumber)
    }

    fun onHintClicked() {
        viewModelScope.launch {
            _uiState.value.problem?.let {
                _oneTimeEvent.emit(OneTimeEvent.ShowHintDialog(it))
            }
        }
    }

    fun onMultipleChoiceAnswerSelected(answer: String) {
        if (_uiState.value.isAnswerRevealed) return
        _uiState.update { it.copy(selectedAnswer = answer) }
        savedStateHandle[KEY_SELECTED_ANSWER] = answer
    }

    fun onAnswerSelectionCleared() {
        if (_uiState.value.isAnswerRevealed) return
        _uiState.update { it.copy(selectedAnswer = null) }
        savedStateHandle[KEY_SELECTED_ANSWER] = null
    }

    fun onConfirmAnswerClicked() {
        val state = _uiState.value
        val problem = state.problem
        if (state.isAnswerRevealed || state.selectedAnswer == null || problem == null) return

        val isCorrect = state.selectedAnswer == problem.answer
        SharedPreferencesManager.addProblemToArchive(problem)
        SharedPreferencesManager.logProblemResult(problem, isCorrect)

        _uiState.update { it.copy(isAnswerRevealed = true, archivedProblems = repository.getArchivedProblems()) }
        savedStateHandle[KEY_IS_ANSWER_REVEALED] = true

        if (isCorrect) {
            handleCorrectAnswer()
        } else {
            handleIncorrectAnswer()
        }
    }

    private fun handleCorrectAnswer() {
        SharedPreferencesManager.resetConsecutiveWrongAnswers()
        val oldHighestStreak = SharedPreferencesManager.getHighestStreakCount()
        val oldRank = Rank.getRankForStreak(oldHighestStreak)

        SharedPreferencesManager.updateStreak(true)

        val newHighestStreak = SharedPreferencesManager.getHighestStreakCount()
        val newRank = Rank.getRankForStreak(newHighestStreak)
        val hasRankedUp = newRank.level > oldRank.level

        val problemId = _uiState.value.problem?.id
        val isDailyProblemNowSolved = problemId == dailyProblemId || _uiState.value.isDailyProblemSolved

        _uiState.update {
            it.copy(
                streakCount = SharedPreferencesManager.getStreakCount(),
                highestStreakCount = newHighestStreak,
                triggerWinAnimation = !hasRankedUp,
                triggerRankUpAnimation = hasRankedUp,
                currentRank = newRank,
                playSoundEvent = SoundEvent.Correct,
                isDailyProblemSolved = isDailyProblemNowSolved
            )
        }
    }

    private fun handleIncorrectAnswer() {
        SharedPreferencesManager.incrementConsecutiveWrongAnswers()
        _uiState.update { it.copy(playSoundEvent = SoundEvent.Incorrect) }

        if (uiState.value.streakCount > 0) {
            _uiState.update { it.copy(showSaveStreakDialog = true) }
        } else {
            val consecutiveWrong = SharedPreferencesManager.getConsecutiveWrongAnswers()
            val shouldSuggestLowering = consecutiveWrong >= 3
            _uiState.update { it.copy(showSuggestLowerDifficultyDialog = shouldSuggestLowering) }
        }
    }

    fun onStreakResetConfirmed() {
        SharedPreferencesManager.updateStreak(false)
        val consecutiveWrong = SharedPreferencesManager.getConsecutiveWrongAnswers()
        val shouldSuggestLowering = consecutiveWrong >= 3

        _uiState.update {
            it.copy(
                streakCount = SharedPreferencesManager.getStreakCount(),
                showSaveStreakDialog = false,
                showSuggestLowerDifficultyDialog = shouldSuggestLowering
            )
        }
    }

    fun onSuggestLowerDifficultyDismissed() {
        SharedPreferencesManager.resetConsecutiveWrongAnswers()
        _uiState.update { it.copy(showSuggestLowerDifficultyDialog = false) }
    }

    fun onStreakSavedByAd() {
        onStreakSaveCompleted()
    }

    fun onStreakSaveCompleted() {
        SharedPreferencesManager.resetConsecutiveWrongAnswers()
        _uiState.update { it.copy(showSaveStreakDialog = false, showStreakSavedToast = uiState.value.isPro) }
    }

    fun onNextProblemRequested() {
        loadBonusProblem()
    }

    private fun loadBonusProblem() {
        val bonusProblem = repository.getBonusProblem()
        loadNewProblem(bonusProblem)
    }

    private fun loadNewProblem(problem: MathProblem?) {
        problem?.let {
            val shuffledAnswers = listOf(it.answer, it.distractor1, it.distractor2).shuffled()
            _uiState.update {
                it.copy(
                    problem = problem,
                    shuffledAnswers = shuffledAnswers,
                    selectedAnswer = null,
                    isAnswerRevealed = false,
                    triggerWinAnimation = false,
                    triggerRankUpAnimation = false
                )
            }
            savedStateHandle.keys().forEach { key -> savedStateHandle.remove<Any>(key) }
            savedStateHandle[KEY_SHUFFLED_ANSWERS] = shuffledAnswers
        }
    }

    fun onWinAnimationComplete() {
        _uiState.update { it.copy(triggerWinAnimation = false) }
    }

    fun onRankUpAnimationComplete() {
        _uiState.update { it.copy(triggerRankUpAnimation = false) }
    }

    fun onSoundEventHandled() {
        _uiState.update { it.copy(playSoundEvent = null) }
    }

    fun setSaveStreakAdLoaded(isLoaded: Boolean) {
        _uiState.update { it.copy(isSaveStreakAdLoaded = isLoaded) }
    }

    fun onStreakSaveToastShown() {
        _uiState.update { it.copy(showStreakSavedToast = false) }
    }

    fun initiatePurchaseFlow() {
        viewModelScope.launch {
            _uiState.value.proProductDetails?.let {
                _oneTimeEvent.emit(OneTimeEvent.LaunchPurchaseFlow(it))
            }
        }
    }

    companion object {
        private const val KEY_SHUFFLED_ANSWERS = "shuffled_answers"
        private const val KEY_SELECTED_ANSWER = "selected_answer"
        private const val KEY_IS_ANSWER_REVEALED = "is_answer_revealed"
    }
}
-----------------------------------------------------------------------------
File: MainViewModelFactory.kt
Path: 
Content:
package io.github.galitach.mathhero.ui

import android.app.Application
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.createSavedStateHandle
import androidx.lifecycle.viewmodel.CreationExtras
import io.github.galitach.mathhero.MathHeroApplication

object MainViewModelFactory : ViewModelProvider.Factory {

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(
        modelClass: Class<T>,
        extras: CreationExtras
    ): T {
        if (modelClass.isAssignableFrom(MainViewModel::class.java)) {
            val application = extras[ViewModelProvider.AndroidViewModelFactory.APPLICATION_KEY] as MathHeroApplication
            val savedStateHandle = extras.createSavedStateHandle()
            val billingManager = application.billingManager
            return MainViewModel(application, savedStateHandle, billingManager) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
    }
}
-----------------------------------------------------------------------------
File: ProgressDialogFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.progress

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.core.view.isVisible
import androidx.fragment.app.DialogFragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import com.google.android.material.progressindicator.LinearProgressIndicator
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.Operation
import io.github.galitach.mathhero.data.ProgressCalculator
import io.github.galitach.mathhero.data.SharedPreferencesManager
import io.github.galitach.mathhero.databinding.DialogProgressBinding
import io.github.galitach.mathhero.ui.MainViewModel
import io.github.galitach.mathhero.ui.MainViewModelFactory
import java.text.DecimalFormat
import kotlinx.coroutines.flow.distinctUntilChanged
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch

class ProgressDialogFragment : DialogFragment() {

    private var _binding: DialogProgressBinding? = null
    private val binding get() = _binding!!
    private val viewModel: MainViewModel by activityViewModels { MainViewModelFactory }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogProgressBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.toolbar.setNavigationOnClickListener { dismiss() }
        binding.upgradeButton.setOnClickListener {
            viewModel.initiatePurchaseFlow()
        }
        observeViewModel()
    }

    private fun observeViewModel() {
        viewLifecycleOwner.lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.uiState.map { it.isPro }.distinctUntilChanged().collect { isPro ->
                    updateUi(isPro)
                }
            }
        }
        viewLifecycleOwner.lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.uiState.map { it.proProductDetails }.distinctUntilChanged().collect { details ->
                    details?.oneTimePurchaseOfferDetails?.let {
                        binding.upgradeButton.text = getString(R.string.upgrade_to_pro_price, it.formattedPrice)
                    }
                }
            }
        }
    }

    private fun updateUi(isPro: Boolean) {
        binding.lockedView.isVisible = !isPro
        binding.unlockedView.isVisible = isPro

        if (isPro) {
            loadProgressData()
        }
    }

    private fun loadProgressData() {
        val results = SharedPreferencesManager.getProgressData()
        val highestStreak = SharedPreferencesManager.getHighestStreakCount()
        val report = ProgressCalculator.generateReport(results, highestStreak)

        binding.totalSolvedText.text = getString(R.string.progress_total_solved, report.totalProblemsSolved)
        binding.last7DaysText.text = getString(R.string.progress_last_7_days, report.problemsSolvedLast7Days)
        val df = DecimalFormat("#.##")
        binding.averagePerDayText.text = getString(R.string.progress_average_per_day, df.format(report.averageProblemsPerDay))
        binding.longestStreakText.text = getString(R.string.progress_longest_streak, report.longestStreak)

        binding.accuracyContainer.removeAllViews()
        if (report.accuracyByOperation.isEmpty()) {
            val emptyView = TextView(requireContext()).apply {
                text = getString(R.string.progress_no_accuracy_data)
                setTextAppearance(com.google.android.material.R.style.TextAppearance_Material3_BodyMedium)
            }
            binding.accuracyContainer.addView(emptyView)
        } else {
            report.accuracyByOperation.entries.sortedBy { it.key.ordinal }.forEach { (op, pair) ->
                val (correct, total) = pair
                val accuracyView = layoutInflater.inflate(R.layout.item_progress_accuracy, binding.accuracyContainer, false)

                val iconView = accuracyView.findViewById<ImageView>(R.id.operation_icon)
                val nameView = accuracyView.findViewById<TextView>(R.id.operation_name)
                val percentageView = accuracyView.findViewById<TextView>(R.id.accuracy_percentage)
                val progressView = accuracyView.findViewById<LinearProgressIndicator>(R.id.accuracy_progress)
                val detailsView = accuracyView.findViewById<TextView>(R.id.accuracy_details)

                iconView.setImageResource(getIconForOperation(op))
                nameView.text = op.name.lowercase().replaceFirstChar { it.titlecase() }
                val percentage = if (total > 0) (correct.toFloat() / total * 100).toInt() else 0
                percentageView.text = getString(R.string.progress_percentage, percentage)
                progressView.progress = percentage
                detailsView.text = getString(R.string.progress_accuracy_details, correct, total)

                binding.accuracyContainer.addView(accuracyView)
            }
        }
    }

    private fun getIconForOperation(operation: Operation): Int {
        return when(operation) {
            Operation.ADDITION -> R.drawable.ic_op_plus_small
            Operation.SUBTRACTION -> R.drawable.ic_op_minus_small
            Operation.MULTIPLICATION -> R.drawable.ic_op_multiply_small
            Operation.DIVISION -> R.drawable.ic_op_divide_small
        }
    }

    override fun getTheme(): Int {
        return R.style.FullScreenDialog
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "ProgressDialogFragment"
        fun newInstance(): ProgressDialogFragment {
            return ProgressDialogFragment()
        }
    }
}
-----------------------------------------------------------------------------
File: RankAdapter.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.ranks

import android.graphics.PorterDuff
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.color.MaterialColors
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.Rank
import io.github.galitach.mathhero.databinding.ItemRankBinding

class RankAdapter(
    private val ranks: List<Rank>,
    private val highestStreak: Int
) : RecyclerView.Adapter<RankAdapter.RankViewHolder>() {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RankViewHolder {
        val binding = ItemRankBinding.inflate(
            LayoutInflater.from(parent.context),
            parent,
            false
        )
        return RankViewHolder(binding)
    }

    override fun onBindViewHolder(holder: RankViewHolder, position: Int) {
        holder.bind(ranks[position], highestStreak)
    }

    override fun getItemCount(): Int = ranks.size

    class RankViewHolder(private val binding: ItemRankBinding) :
        RecyclerView.ViewHolder(binding.root) {

        fun bind(rank: Rank, highestStreak: Int) {
            val isUnlocked = highestStreak >= rank.requiredStreak
            val context = binding.root.context

            binding.rankImage.setImageResource(rank.imageRes)
            binding.rankName.text = if (isUnlocked) {
                context.getString(rank.nameRes)
            } else {
                context.getString(R.string.rank_locked)
            }

            binding.rankRequirement.text = if (isUnlocked) {
                context.getString(R.string.rank_requirement_unlocked, rank.requiredStreak)
            } else {
                context.getString(R.string.rank_requirement_locked, rank.requiredStreak)
            }

            binding.root.alpha = if (isUnlocked) 1.0f else 0.5f

            if (isUnlocked) {
                binding.rankImage.clearColorFilter()
            } else {
                val silhouetteColor = MaterialColors.getColor(
                    context,
                    com.google.android.material.R.attr.colorOnSurface,
                    0
                )
                binding.rankImage.setColorFilter(silhouetteColor, PorterDuff.Mode.SRC_IN)
            }
        }
    }
}
-----------------------------------------------------------------------------
File: RanksDialogFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.ranks

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.DialogFragment
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.Rank
import io.github.galitach.mathhero.databinding.DialogRanksBinding

class RanksDialogFragment : DialogFragment() {

    private var _binding: DialogRanksBinding? = null
    private val binding get() = _binding!!

    private val highestStreak: Int by lazy {
        arguments?.getInt(ARG_HIGHEST_STREAK) ?: 0
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogRanksBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.toolbar.setNavigationOnClickListener { dismiss() }
        setupRecyclerView()
    }

    private fun setupRecyclerView() {
        binding.ranksRecyclerView.adapter = RankAdapter(Rank.allRanks, highestStreak)
    }

    override fun getTheme(): Int {
        return R.style.FullScreenDialog
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "RanksDialogFragment"
        private const val ARG_HIGHEST_STREAK = "arg_highest_streak"

        fun newInstance(highestStreak: Int): RanksDialogFragment {
            return RanksDialogFragment().apply {
                arguments = Bundle().apply {
                    putInt(ARG_HIGHEST_STREAK, highestStreak)
                }
            }
        }
    }
}
-----------------------------------------------------------------------------
File: SettingsDialogFragment.kt
Path: 
Content:
package io.github.galitach.mathhero.ui.settings

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.core.view.isVisible
import androidx.fragment.app.DialogFragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import com.google.android.material.snackbar.Snackbar
import io.github.galitach.mathhero.R
import io.github.galitach.mathhero.data.SharedPreferencesManager
import io.github.galitach.mathhero.databinding.DialogSettingsBinding
import io.github.galitach.mathhero.notifications.NotificationScheduler
import io.github.galitach.mathhero.ui.MainViewModel
import io.github.galitach.mathhero.ui.MainViewModelFactory
import kotlinx.coroutines.flow.distinctUntilChanged
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch

class SettingsDialogFragment : DialogFragment() {

    private var _binding: DialogSettingsBinding? = null
    private val binding get() = _binding!!
    private val viewModel: MainViewModel by activityViewModels { MainViewModelFactory }

    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                enableNotifications(true)
            } else {
                binding.notificationSwitch.isChecked = false
                showPermissionSnackbar()
            }
        }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogSettingsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding.toolbar.setNavigationOnClickListener { dismiss() }
        setupViews()
        observeViewModel()
    }

    private fun setupViews() {
        // Notification Switch
        binding.notificationSwitch.isChecked = SharedPreferencesManager.areNotificationsEnabled()
        binding.notificationSwitch.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                requestNotificationPermission()
            } else {
                enableNotifications(false)
            }
        }

        // Sound Switch
        binding.soundSwitch.isChecked = SharedPreferencesManager.isSoundEnabled()
        binding.soundSwitch.setOnCheckedChangeListener { _, isChecked ->
            SharedPreferencesManager.setSoundEnabled(isChecked)
        }

        // Upgrade Button
        binding.upgradeButton.setOnClickListener {
            viewModel.initiatePurchaseFlow()
        }
    }

    private fun observeViewModel() {
        viewLifecycleOwner.lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.uiState.map { it.isPro }.distinctUntilChanged().collect { isPro ->
                    binding.proUserGroup.isVisible = isPro
                    binding.upgradeButton.isVisible = !isPro
                }
            }
        }
    }

    private fun requestNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            when {
                ContextCompat.checkSelfPermission(
                    requireContext(),
                    Manifest.permission.POST_NOTIFICATIONS
                ) == PackageManager.PERMISSION_GRANTED -> {
                    enableNotifications(true)
                }
                shouldShowRequestPermissionRationale(Manifest.permission.POST_NOTIFICATIONS) -> {
                    showPermissionSnackbar()
                    binding.notificationSwitch.isChecked = false
                }
                else -> {
                    requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
                }
            }
        } else {
            enableNotifications(true)
        }
    }

    private fun enableNotifications(enabled: Boolean) {
        SharedPreferencesManager.setNotificationsEnabled(enabled)
        if (enabled) {
            NotificationScheduler.scheduleDailyNotification(requireContext())
        } else {
            NotificationScheduler.cancelDailyNotification(requireContext())
        }
    }

    private fun showPermissionSnackbar() {
        Snackbar.make(binding.root, R.string.notification_permission_required, Snackbar.LENGTH_LONG)
            .setAction(R.string.action_settings) {
                val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                val uri = Uri.fromParts("package", requireContext().packageName, null)
                intent.data = uri
                startActivity(intent)
            }
            .show()
    }

    override fun getTheme(): Int {
        return R.style.FullScreenDialog
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        const val TAG = "SettingsDialogFragment"
    }
}
-----------------------------------------------------------------------------
File: selector_preset_icon_tint.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:color="?attr/colorPrimary" android:state_checked="true" />
    <item android:color="?attr/colorOnSurfaceVariant" android:state_checked="false"/>
    <item android:color="?attr/colorOnSurfaceVariant"/>
</selector>
-----------------------------------------------------------------------------
File: bg_difficulty_preset.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<selector xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:state_checked="true">
        <shape android:shape="rectangle">
            <corners android:radius="12dp" />
            <solid android:color="?attr/colorPrimaryContainer" />
            <stroke android:width="2dp" android:color="?attr/colorPrimary" />
        </shape>
    </item>
    <item>
        <shape android:shape="rectangle">
            <corners android:radius="12dp" />
            <solid android:color="?attr/colorSurfaceVariant" />
        </shape>
    </item>
</selector>
-----------------------------------------------------------------------------
File: bg_main_texture.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?attr/colorSurface" />
    <item>
        <bitmap
            android:alpha="0.05"
            android:src="@drawable/noise_texture"
            android:tileMode="repeat" />
    </item>
</layer-list>
-----------------------------------------------------------------------------
File: bottom_sheet_background.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="?attr/colorSurfaceContainer" />
    <corners
        android:topLeftRadius="16dp"
        android:topRightRadius="16dp" />
</shape>
-----------------------------------------------------------------------------
File: ic_archive.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M3,3h18v2L3,5v0zM4,7h16v12L4,19v0zM9,11v2h6v-2L9,11z"
        android:strokeAlpha="0.8"
        android:fillAlpha="0.8"/>
</vector>
-----------------------------------------------------------------------------
File: ic_bonus_riddle.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnPrimary">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M17.5,12h-2.5v-2.5c0,-0.55 -0.45,-1 -1,-1s-1,0.45 -1,1V12h-2.5c-0.55,0 -1,0.45 -1,1s0.45,1 1,1H11v2.5c0,0.55 0.45,1 1,1s1,-0.45 1,-1V14h2.5c0.55,0 1,-0.45 1,-1s-0.45,-1 -1,-1zM19,2H5c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zM19,18H5V4h14v14z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_check_circle.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="64dp"
    android:height="64dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorPrimary">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM10,17l-5,-5 1.41,-1.41L10,14.17l7.59,-7.59L19,8l-9,9z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_close.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_empty_archive.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="96dp"
    android:height="96dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface"
    android:alpha="0.6">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M20.5,11H19V7c0,-1.1 -0.9,-2 -2,-2h-4c-1.1,0 -2,0.9 -2,2v1.5c-0.83,0 -1.5,0.67 -1.5,1.5v1c0,0.83 0.67,1.5 1.5,1.5V17c0,1.1 0.9,2 2,2h4c1.1,0 2,-0.9 2,-2v-4h1.5c0.83,0 1.5,-0.67 1.5,-1.5v-1c0,-0.83 -0.67,-1.5 -1.5,-1.5zM17,17h-4V7h4v10zM3.5,11H5v4c0,1.1 0.9,2 2,2h4v-1.5c-0.83,0 -1.5,-0.67 -1.5,-1.5v-1c0,-0.83 0.67,-1.5 1.5,-1.5V7c0,-1.1 -0.9,-2 -2,-2H7c-1.1,0 -2,0.9 -2,2v4H3.5c-0.83,0 -1.5,0.67 -1.5,1.5v1c0,0.83 0.67,1.5 1.5,1.5z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_hero_silhouette.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="96dp"
    android:height="96dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface"
    android:alpha="0.3">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_info.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM11,7h2v2h-2zM11,11h2v6h-2z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_launcher_background.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<vector
    android:height="108dp"
    android:width="108dp"
    android:viewportHeight="108"
    android:viewportWidth="108"
    xmlns:android="http://schemas.android.com/apk/res/android">
    <path android:fillColor="#3DDC84"
          android:pathData="M0,0h108v108h-108z"/>
    <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
</vector>

-----------------------------------------------------------------------------
File: ic_launcher_foreground.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
-----------------------------------------------------------------------------
File: ic_notification_icon.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFFFF"
        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM11,16h2v-2h-2v2zM12,13c0.55,0 1,-0.45 1,-1V8c0,-0.55 -0.45,-1 -1,-1s-1,0.45 -1,1v4c0,0.55 0.45,1 1,1z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_op_divide_small.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="12dp"
    android:height="12dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,13H5v-2h14v2zM12,5m-2,0a2,2 0,1 1,4 0a2,2 0,1 1,-4 0M12,19m-2,0a2,2 0,1 1,4 0a2,2 0,1 1,-4 0"/>
</vector>
-----------------------------------------------------------------------------
File: ic_op_minus_small.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="12dp"
    android:height="12dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,13H5v-2h14v2z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_op_multiply_small.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="12dp"
    android:height="12dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_op_plus_small.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="12dp"
    android:height="12dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_play_video.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorPrimary">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M8,5v14l11,-7z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_preset_apprentice.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <!-- Plus symbol in top half -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M13,4h-2v3H8v2h3v3h2V9h3V7h-3V4z"/>
    <!-- Minus symbol in bottom half -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M16,17H8v-2h8v2z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_preset_expert.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <!-- Plus symbol top-left -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M9,5H7v2H5v2h2v2h2V9h2V7H9V5z"/>
    <!-- Minus symbol top-right -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,8h-6V6h6v2z"/>
    <!-- Multiply symbol bottom-center -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M14.12,14.88L12.71,16.29L11.29,14.88L9.88,16.29L11.29,17.71L9.88,19.12L11.29,20.54L12.71,19.12L14.12,20.54L15.54,19.12L14.12,17.71L15.54,16.29L14.12,14.88z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_preset_master.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <!-- Plus, top-left -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M9,5H7v2H5v2h2v2h2V9h2V7H9V5z"/>
    <!-- Minus, top-right -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,8h-6V6h6v2z"/>
    <!-- Multiply, bottom-left -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M9.12,14.88L7.71,16.29L6.29,14.88L4.88,16.29L6.29,17.71L4.88,19.12L6.29,20.54L7.71,19.12L9.12,20.54L10.54,19.12L9.12,17.71L10.54,16.29L9.12,14.88z"/>
    <!-- Divide, bottom-right (Aligned) -->
    <path
        android:fillColor="#FF000000"
        android:pathData="M13,17.5h6v1h-6z M16,15.5m-1,0a1,1 0,1 0,2 0a1,1 0,1 0,-2 0 M16,20.5m-1,0a1,1 0,1 0,2 0a1,1 0,1 0,-2 0"/>
</vector>
-----------------------------------------------------------------------------
File: ic_preset_novice.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_progress_report.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M3.5,18.49l6,-6.01 4,4L22,6.92l-1.41,-1.41 -7.09,7.97 -4,-4L2,16.99z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_share.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorOnSurface">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M18,16.08c-0.76,0 -1.44,0.3 -1.96,0.77L8.91,12.7c0.05,-0.23 0.09,-0.46 0.09,-0.7s-0.04,-0.47 -0.09,-0.7l7.05,-4.11c0.54,0.5 1.25,0.81 2.04,0.81 1.66,0 3,-1.34 3,-3s-1.34,-3 -3,-3 -3,1.34 -3,3c0,0.24 0.04,0.47 0.09,0.7L8.04,9.81C7.5,9.31 6.79,9 6,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3c0.79,0 1.5,-0.31 2.04,-0.81l7.12,4.16c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.66 1.34,3 3,3s3,-1.34 3,-3 -1.34,-3 -3,-3z"/>
</vector>
-----------------------------------------------------------------------------
File: ic_star_filled.xml
Path: 
Content:
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorPrimary">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,17.27L18.18,21l-1.64,-7.03L22,9.24l-7.19,-0.61L12,2 9.19,8.63 2,9.24l5.46,4.73L5.82,21z"/>
</vector>
-----------------------------------------------------------------------------
File: noise_texture.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
    android:src="@android:drawable/screen_background_dark"
    android:tileMode="repeat"
    android:dither="true" />
-----------------------------------------------------------------------------
File: merriweather.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto">
    <font
        app:fontStyle="normal"
        app:fontWeight="400"
        app:font="@font/merriweather_regular" />
    <font
        app:fontStyle="normal"
        app:fontWeight="700"
        app:font="@font/merriweather_bold" />
</font-family>
-----------------------------------------------------------------------------
File: montserrat.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:app="http://schemas.android.com/apk/res-auto">
    <font
        app:fontStyle="normal"
        app:fontWeight="400"
        app:font="@font/montserrat_regular" />
    <font
        app:fontStyle="normal"
        app:fontWeight="700"
        app:font="@font/montserrat_bold" />
</font-family>
-----------------------------------------------------------------------------
File: activity_main.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:layoutDirection="ltr"
    tools:context=".ui.MainActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="?attr/colorSurface"
        app:elevation="0dp"
        app:layout_constraintTop_toTopOf="parent">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:title="@string/app_name">

            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="end"
                android:gravity="center_vertical"
                android:orientation="horizontal"
                android:paddingEnd="16dp"
                tools:ignore="RtlSymmetry">

                <ImageView
                    android:id="@+id/streak_icon"
                    android:layout_width="20dp"
                    android:layout_height="20dp"
                    android:contentDescription="@string/streak_counter_description"
                    android:src="@drawable/ic_streak_flame"
                    android:visibility="gone"
                    tools:visibility="visible" />

                <TextView
                    android:id="@+id/streak_counter"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="4dp"
                    android:textAppearance="?attr/textAppearanceTitleMedium"
                    android:textColor="?attr/colorPrimary"
                    android:visibility="gone"
                    tools:text="7"
                    tools:visibility="visible" />
            </LinearLayout>

        </com.google.android.material.appbar.MaterialToolbar>

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/main_content"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:paddingStart="24dp"
        android:paddingEnd="24dp"
        app:layout_constraintBottom_toTopOf="@id/bottom_actions_container"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/appBarLayout">

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/hero_card"
            style="?attr/materialCardViewOutlinedStyle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:clickable="true"
            android:focusable="true"
            app:layout_constraintBottom_toTopOf="@+id/problem_card"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_chainStyle="packed">

            <LinearLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:gravity="center_horizontal"
                android:orientation="vertical"
                android:padding="16dp">

                <ImageView
                    android:id="@+id/hero_image"
                    android:layout_width="80dp"
                    android:layout_height="80dp"
                    android:contentDescription="@string/hero_level_description"
                    tools:src="@raw/mathhero_1" />

                <LinearLayout
                    android:id="@+id/status_container"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:gravity="center"
                    android:orientation="vertical"
                    android:visibility="gone"
                    tools:visibility="visible">

                    <TextView
                        android:id="@+id/rank_name_text"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:textAppearance="?attr/textAppearanceTitleLarge"
                        android:textColor="?attr/colorPrimary"
                        tools:text="Novice" />

                    <TextView
                        android:id="@+id/difficulty_text"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="2dp"
                        android:textAppearance="?attr/textAppearanceLabelLarge"
                        android:textColor="?attr/colorOnSurfaceVariant"
                        tools:text="Apprentice" />
                </LinearLayout>
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.card.MaterialCardView
            android:id="@+id/problem_card"
            style="?attr/materialCardViewElevatedStyle"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            app:cardBackgroundColor="?attr/colorSurface"
            app:cardCornerRadius="16dp"
            app:layout_constraintBottom_toTopOf="@+id/multipleChoiceGroup"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/hero_card">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:gravity="center_horizontal"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    android:id="@+id/problemText"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:textAlignment="center"
                    android:textAppearance="?attr/textAppearanceHeadline5"
                    tools:text="15 + 8 = ?" />

                <RatingBar
                    android:id="@+id/difficulty_rating"
                    style="?android:attr/ratingBarStyleSmall"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="12dp"
                    android:isIndicator="true"
                    android:numStars="10"
                    android:stepSize="1"
                    android:theme="@style/RatingBar"
                    tools:rating="3" />
            </LinearLayout>
        </com.google.android.material.card.MaterialCardView>

        <com.google.android.material.button.MaterialButtonToggleGroup
            android:id="@+id/multipleChoiceGroup"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:orientation="vertical"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@id/problem_card"
            app:singleSelection="true">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/multiple_choice_1"
                style="?attr/materialButtonOutlinedStyle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                tools:text="21" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/multiple_choice_2"
                style="?attr/materialButtonOutlinedStyle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                tools:text="23" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/multiple_choice_3"
                style="?attr/materialButtonOutlinedStyle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                tools:text="25" />
        </com.google.android.material.button.MaterialButtonToggleGroup>

    </androidx.constraintlayout.widget.ConstraintLayout>

    <FrameLayout
        android:id="@+id/bottom_actions_container"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:padding="16dp"
        app:layout_constraintBottom_toTopOf="@id/ad_view_container"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent">

        <FrameLayout
            android:id="@+id/pre_answer_actions_container"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <LinearLayout
                android:id="@+id/hint_button_container"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/buttonHint"
                    style="?attr/materialButtonOutlinedStyle"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="@string/hint" />
            </LinearLayout>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/buttonConfirmAnswer"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="@string/confirm_answer"
                android:visibility="gone"
                tools:visibility="visible" />
        </FrameLayout>

        <LinearLayout
            android:id="@+id/post_answer_actions_container"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:gravity="center_vertical"
            android:orientation="horizontal"
            android:visibility="gone"
            tools:visibility="visible">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/nextProblemButton"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                tools:text="@string/next_problem" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/buttonInfo"
                style="@style/Widget.Material3.Button.IconButton"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:contentDescription="@string/explanation_title"
                app:icon="@drawable/ic_info" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/buttonShare"
                style="@style/Widget.Material3.Button.IconButton"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:contentDescription="@string/share_problem_title"
                app:icon="@drawable/ic_share" />
        </LinearLayout>

    </FrameLayout>

    <FrameLayout
        android:id="@+id/ad_view_container"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent">

        <com.google.android.gms.ads.AdView
            android:id="@+id/adView"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:adSize="BANNER"
            app:adUnitId="ca-app-pub-9478542207288731/7719593670" />
    </FrameLayout>

    <nl.dionsegijn.konfetti.xml.KonfettiView
        android:id="@+id/konfettiView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
-----------------------------------------------------------------------------
File: bottom_sheet_hint.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@drawable/bottom_sheet_background"
    android:orientation="vertical"
    android:padding="24dp">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:text="@string/hint"
        android:textAppearance="?attr/textAppearanceTitleLarge" />

    <com.google.android.material.divider.MaterialDivider
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:layout_marginBottom="16dp" />

    <GridLayout
        android:id="@+id/hint_grid"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:columnCount="10"
        tools:layout_height="100dp" />

</LinearLayout>
-----------------------------------------------------------------------------
File: chip_operation.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.chip.Chip xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    style="@style/Widget.Material3.Chip.Filter"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    tools:text="Addition" />
-----------------------------------------------------------------------------
File: dialog_archive.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:background="?attr/colorSurface">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_close"
            app:title="@string/archive_title" />

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/archive_recycler_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:clipToPadding="false"
        android:padding="8dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/appBarLayout"
        tools:listitem="@layout/item_archive_problem" />

    <LinearLayout
        android:id="@+id/empty_state"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:orientation="vertical"
        android:padding="32dp"
        android:visibility="gone"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/appBarLayout"
        tools:visibility="visible">

        <ImageView
            android:layout_width="96dp"
            android:layout_height="96dp"
            android:src="@drawable/ic_empty_archive"
            android:contentDescription="@null" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:text="@string/archive_empty"
            android:textAlignment="center"
            android:textAppearance="?attr/textAppearanceBodyLarge" />

    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>
-----------------------------------------------------------------------------
File: dialog_difficulty_selection.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    android:fitsSystemWindows="true"
    android:layoutDirection="ltr"
    android:orientation="vertical">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_close"
            app:title="@string/difficulty_selection_title" />

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/difficulty_presets"
                android:textAppearance="?attr/textAppearanceTitleMedium" />

            <RadioGroup
                android:id="@+id/presets_group"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp" />

            <com.google.android.material.divider.MaterialDivider
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="16dp" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/difficulty_customize"
                android:textAppearance="?attr/textAppearanceTitleMedium" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                android:text="@string/operations"
                android:textAppearance="?attr/textAppearanceLabelLarge"
                android:textColor="?attr/colorOnSurfaceVariant" />

            <com.google.android.material.chip.ChipGroup
                android:id="@+id/operations_group"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                app:singleSelection="false" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                android:text="@string/largest_number"
                android:textAppearance="?attr/textAppearanceLabelLarge"
                android:textColor="?attr/colorOnSurfaceVariant" />

            <com.google.android.material.slider.Slider
                android:id="@+id/max_number_slider"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:stepSize="5"
                android:value="10"
                android:valueFrom="5"
                android:valueTo="100" />

        </LinearLayout>

    </androidx.core.widget.NestedScrollView>

    <com.google.android.material.button.MaterialButton
        android:id="@+id/save_button"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:text="@string/save" />

</LinearLayout>
-----------------------------------------------------------------------------
File: dialog_hint.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#80000000"
    android:clickable="true"
    android:focusable="true">

    <com.google.android.material.card.MaterialCardView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:layout_marginStart="32dp"
        android:layout_marginEnd="32dp"
        app:cardCornerRadius="16dp"
        app:cardElevation="8dp">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="24dp">

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:gravity="center"
                    android:text="@string/hint"
                    android:textAppearance="?attr/textAppearanceTitleLarge" />

                <com.google.android.material.divider.MaterialDivider
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="16dp"
                    android:layout_marginBottom="16dp" />

                <GridLayout
                    android:id="@+id/hint_grid"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_gravity="center"
                    android:columnCount="10"
                    tools:layout_height="100dp" />

            </LinearLayout>

            <com.google.android.material.divider.MaterialDivider
                android:layout_width="match_parent"
                android:layout_height="wrap_content" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="?attr/selectableItemBackground"
                android:gravity="center"
                android:padding="16dp"
                android:text="@string/close"
                android:textAppearance="?attr/textAppearanceLabelLarge"
                android:textColor="?attr/colorPrimary" />

        </LinearLayout>

    </com.google.android.material.card.MaterialCardView>

</FrameLayout>
-----------------------------------------------------------------------------
File: dialog_progress.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    android:fitsSystemWindows="true"
    android:orientation="vertical">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_close"
            app:title="@string/progress_report" />

    </com.google.android.material.appbar.AppBarLayout>

    <FrameLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <!-- Locked View for Free Users -->
        <LinearLayout
            android:id="@+id/locked_view"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:gravity="center"
            android:orientation="vertical"
            android:padding="32dp"
            android:visibility="gone"
            tools:visibility="visible">

            <ImageView
                android:layout_width="96dp"
                android:layout_height="96dp"
                android:contentDescription="@null"
                android:src="@drawable/ic_hero_silhouette" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="16dp"
                android:text="@string/progress_locked_title"
                android:textAlignment="center"
                android:textAppearance="?attr/textAppearanceHeadline6" />

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="@string/progress_locked_desc"
                android:textAlignment="center"
                android:textAppearance="?attr/textAppearanceBodyLarge" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/upgrade_button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="24dp"
                android:text="@string/upgrade_to_pro" />
        </LinearLayout>

        <!-- Unlocked View for PRO Users -->
        <androidx.core.widget.NestedScrollView
            android:id="@+id/unlocked_view"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:visibility="gone"
            tools:visibility="gone">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="16dp">

                <TextView
                    style="@style/TextAppearance.Material3.TitleLarge"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="@string/progress_summary" />

                <com.google.android.material.card.MaterialCardView
                    style="?attr/materialCardViewElevatedStyle"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="16dp">

                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical"
                        android:padding="16dp">

                        <TextView
                            android:id="@+id/total_solved_text"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:textAppearance="?attr/textAppearanceBodyLarge"
                            tools:text="Total Problems Solved: 123" />

                        <TextView
                            android:id="@+id/last_7_days_text"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:layout_marginTop="8dp"
                            android:textAppearance="?attr/textAppearanceBodyLarge"
                            tools:text="Solved in Last 7 Days: 45" />

                        <TextView
                            android:id="@+id/average_per_day_text"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:layout_marginTop="8dp"
                            android:textAppearance="?attr/textAppearanceBodyLarge"
                            tools:text="Average Per Day: 6.4" />

                        <TextView
                            android:id="@+id/longest_streak_text"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:layout_marginTop="8dp"
                            android:textAppearance="?attr/textAppearanceBodyLarge"
                            tools:text="Longest Streak: 50" />
                    </LinearLayout>
                </com.google.android.material.card.MaterialCardView>

                <TextView
                    style="@style/TextAppearance.Material3.TitleLarge"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="24dp"
                    android:text="@string/progress_accuracy" />

                <LinearLayout
                    android:id="@+id/accuracy_container"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:orientation="vertical" />

            </LinearLayout>
        </androidx.core.widget.NestedScrollView>
    </FrameLayout>
</LinearLayout>
-----------------------------------------------------------------------------
File: dialog_ranks.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    android:fitsSystemWindows="true"
    android:orientation="vertical">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_close"
            app:title="@string/ranks_title" />

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/ranks_recycler_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:clipToPadding="false"
        android:padding="8dp"
        app:layoutManager="androidx.recyclerview.widget.GridLayoutManager"
        app:spanCount="2"
        tools:listitem="@layout/item_rank" />

</LinearLayout>
-----------------------------------------------------------------------------
File: dialog_settings.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    android:fitsSystemWindows="true"
    android:orientation="vertical">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_close"
            app:title="@string/settings" />

    </com.google.android.material.appbar.AppBarLayout>

    <com.google.android.material.switchmaterial.SwitchMaterial
        android:id="@+id/notification_switch"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:layout_marginTop="16dp"
        android:layout_marginEnd="16dp"
        android:text="@string/enable_daily_problem_notification"
        android:textAppearance="?attr/textAppearanceBodyLarge" />

    <com.google.android.material.switchmaterial.SwitchMaterial
        android:id="@+id/sound_switch"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:text="@string/enable_sound_effects"
        android:textAppearance="?attr/textAppearanceBodyLarge" />

    <com.google.android.material.divider.MaterialDivider
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp" />

    <LinearLayout
        android:id="@+id/pro_user_group"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center_vertical"
        android:orientation="horizontal"
        android:padding="16dp"
        android:visibility="gone"
        tools:visibility="visible">

        <ImageView
            android:layout_width="24dp"
            android:layout_height="24dp"
            android:src="@drawable/ic_star_filled"
            app:tint="?attr/colorPrimary" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:text="@string/pro_user_status"
            android:textAppearance="?attr/textAppearanceBodyLarge" />

    </LinearLayout>

    <com.google.android.material.button.MaterialButton
        android:id="@+id/upgrade_button"
        style="?attr/materialButtonOutlinedStyle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:text="@string/upgrade_to_pro"
        android:visibility="visible"
        tools:visibility="gone" />

</LinearLayout>
-----------------------------------------------------------------------------
File: item_archive_problem.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardBackgroundColor="@android:color/transparent"
    app:cardElevation="0dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <TextView
            android:id="@+id/problem_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textAppearance="?attr/textAppearanceBodyLarge"
            tools:text="15 + 8 = ?" />

        <TextView
            android:id="@+id/answer_text"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:textAppearance="?attr/textAppearanceTitleMedium"
            android:textColor="?attr/colorPrimary"
            tools:text="23" />

    </LinearLayout>

</com.google.android.material.card.MaterialCardView>
-----------------------------------------------------------------------------
File: item_difficulty_preset.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<RadioButton xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginBottom="8dp"
    android:background="@drawable/bg_difficulty_preset"
    android:button="@null"
    android:drawablePadding="16dp"
    android:gravity="center_vertical"
    android:padding="16dp"
    android:textAppearance="?attr/textAppearanceBodyLarge"
    tools:drawableStart="@drawable/ic_preset_apprentice"
    tools:text="Apprentice" />
-----------------------------------------------------------------------------
File: item_progress_accuracy.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:paddingTop="8dp"
    android:paddingBottom="8dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center_vertical">

        <ImageView
            android:id="@+id/operation_icon"
            android:layout_width="16dp"
            android:layout_height="16dp"
            android:layout_marginEnd="8dp"
            app:tint="?attr/colorOnSurfaceVariant"
            tools:src="@drawable/ic_op_plus_small" />

        <TextView
            android:id="@+id/operation_name"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:textAppearance="?attr/textAppearanceTitleMedium"
            tools:text="Addition" />

        <TextView
            android:id="@+id/accuracy_percentage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAppearance="?attr/textAppearanceTitleMedium"
            android:textColor="?attr/colorPrimary"
            tools:text="95%" />
    </LinearLayout>

    <com.google.android.material.progressindicator.LinearProgressIndicator
        android:id="@+id/accuracy_progress"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="4dp"
        tools:progress="95" />

    <TextView
        android:id="@+id/accuracy_details"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="2dp"
        android:textAppearance="?attr/textAppearanceBodySmall"
        android:textColor="?attr/colorOnSurfaceVariant"
        tools:text="19 correct out of 20" />

</LinearLayout>
-----------------------------------------------------------------------------
File: item_rank.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:gravity="center"
    android:orientation="vertical"
    android:padding="16dp">

    <ImageView
        android:id="@+id/rank_image"
        android:layout_width="80dp"
        android:layout_height="80dp"
        android:contentDescription="@string/hero_level_description"
        tools:src="@raw/mathhero_1" />

    <TextView
        android:id="@+id/rank_name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:textAppearance="?attr/textAppearanceTitleMedium"
        tools:text="Novice" />

    <TextView
        android:id="@+id/rank_requirement"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="4dp"
        android:textAppearance="?attr/textAppearanceLabelMedium"
        android:textColor="?attr/colorSecondary"
        tools:text="Requires 10 streak" />

</LinearLayout>
-----------------------------------------------------------------------------
File: main_menu.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/action_archive"
        android:icon="@drawable/ic_archive"
        android:title="@string/archive"
        app:showAsAction="ifRoom" />
    <item
        android:id="@+id/action_progress"
        android:icon="@drawable/ic_progress_report"
        android:title="@string/progress_report"
        app:showAsAction="ifRoom" />
    <item
        android:id="@+id/action_difficulty"
        android:title="@string/difficulty"
        app:showAsAction="never" />
    <item
        android:id="@+id/action_settings"
        android:title="@string/settings"
        app:showAsAction="never" />
    <item
        android:id="@+id/action_rate_app"
        android:title="@string/rate_app"
        app:showAsAction="never" />
    <item
        android:id="@+id/action_upgrade_pro"
        android:title="@string/upgrade_to_pro"
        app:showAsAction="never" />
    <item
        android:id="@+id/action_licenses"
        android:title="@string/open_source_licenses"
        app:showAsAction="never" />
</menu>
-----------------------------------------------------------------------------
File: ic_launcher.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
-----------------------------------------------------------------------------
File: ic_launcher_round.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
-----------------------------------------------------------------------------
File: colors.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Brand Palette -->
    <color name="math_gold">#C2A661</color>
    <color name="parchment">#FDF8EC</color>
    <color name="dark_slate">#141218</color>
    <color name="off_white">#E8E2D5</color>
    <color name="soft_gold">#E1C28C</color>

    <!-- Light Theme Material 3 Colors -->
    <color name="colorPrimary">#765B22</color>
    <color name="colorOnPrimary">#FFFFFF</color>
    <color name="colorPrimaryContainer">#FFDEAD</color>
    <color name="colorOnPrimaryContainer">#291800</color>
    <color name="colorSecondary">#6A5D3F</color>
    <color name="colorOnSecondary">#FFFFFF</color>
    <color name="colorSecondaryContainer">#F3E1BB</color>
    <color name="colorOnSecondaryContainer">#241A04</color>
    <color name="colorTertiary">#496546</color>
    <color name="colorOnTertiary">#FFFFFF</color>
    <color name="colorTertiaryContainer">#CBEBC3</color>
    <color name="colorOnTertiaryContainer">#062108</color>
    <color name="colorError">#BA1A1A</color>
    <color name="colorOnError">#FFFFFF</color>
    <color name="colorErrorContainer">#FFDAD6</color>
    <color name="colorOnErrorContainer">#410002</color>
    <color name="colorBackground">@color/parchment</color>
    <color name="colorOnBackground">#1E1B13</color>
    <color name="colorSurface">@color/parchment</color>
    <color name="colorOnSurface">#1E1B13</color>
    <color name="colorSurfaceVariant">#EDE1CF</color>
    <color name="colorOnSurfaceVariant">#4D4639</color>
    <color name="colorOutline">#7F7667</color>
    <color name="colorInverseOnSurface">#F8EFE2</color>
    <color name="colorInverseSurface">#343027</color>
    <color name="colorInversePrimary">@color/soft_gold</color>

    <!-- State Colors -->
    <color name="correct_green">#4CAF50</color>
    <color name="incorrect_red">#F44336</color>

    <!-- Hint Colors -->
    <color name="hint_add_primary">#1E88E5</color> <!-- Blue -->
    <color name="hint_add_secondary">#FB8C00</color> <!-- Orange -->

    <color name="hint_color_1">#E53935</color> <!-- Red -->
    <color name="hint_color_2">#1E88E5</color> <!-- Blue -->
    <color name="hint_color_3">#43A047</color> <!-- Green -->
    <color name="hint_color_4">#FFB300</color> <!-- Amber -->
    <color name="hint_color_5">#FB8C00</color> <!-- Orange -->
    <color name="hint_color_6">#8E24AA</color> <!-- Purple -->
    <color name="hint_color_7">#00ACC1</color> <!-- Cyan -->
    <color name="hint_color_8">#D81B60</color> <!-- Pink -->
    <color name="hint_color_9">#7CB342</color> <!-- Lime -->
    <color name="hint_color_10">#546E7A</color> <!-- Blue Grey -->
</resources>
-----------------------------------------------------------------------------
File: dimens.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <dimen name="archive_divider_margin">16dp</dimen>
    <dimen name="hint_star_size_large">20dp</dimen>
    <dimen name="hint_star_size_medium">14dp</dimen>
    <dimen name="hint_star_size_small">10dp</dimen>
</resources>
-----------------------------------------------------------------------------
File: strings.xml
Path: 
Content:
<resources>
    <string name="app_name">Math Hero</string>
    <string name="share_problem_title">Share Problem</string>
    <string name="archive">Archive</string>
    <string name="no_problem_available">No math problem available. Please check back tomorrow.</string>
    <string name="disclaimer_title">Welcome to Math Hero</string>
    <string name="disclaimer_message">Welcome to Math Hero! Our goal is to make learning math fun. Enjoy your daily challenge!</string>
    <string name="notification_channel_name">Daily Math Problems</string>
    <string name="notification_channel_description">Receive a notification for your math problem of the day.</string>
    <string name="notification_title">Your daily math challenge awaits!</string>
    <string name="notification_text">Tap to solve today\'s math problem.</string>
    <string name="notifications_disabled_toast">Notifications disabled. You can enable them in app settings.</string>
    <string name="archive_title">Past Problems</string>
    <string name="close">Close</string>
    <string name="archive_empty">The archive is empty. Solved problems will appear here!</string>
    <string name="rate_app">Rate App</string>
    <string name="privacy_policy">Privacy Policy</string>
    <string name="privacy_policy_title">Privacy Policy</string>
    <string name="privacy_policy_text">This app, Math Hero, is a standalone application that does not collect, store, or share any personal user data. All problems are self-contained within the app.\n\nThird-party services:\n- Google AdMob: To support the app, we use Google AdMob for advertising. AdMob may collect data to provide personalized ads. For more information, please see Google\'s Privacy Policy.\n- Google Play Services: The app may use Google Play Services for core functionalities.\n\nBy using this app, you consent to this policy.</string>
    <string name="streak_counter_description">Daily streak counter</string>
    <string name="confirm_answer">Confirm Answer</string>
    <string name="notification_action_reveal">Reveal Answer</string>
    <string name="notification_action_solved">I Solved It!</string>
    <string name="notification_answer_title">The answer is…</string>
    <string name="settings">Settings</string>
    <string name="open_source_licenses">Open Source Licenses</string>
    <string name="notifications_title">Notifications</string>
    <string name="enable_daily_problem_notification">Enable daily math problem notification</string>
    <string name="notification_permission_required">Notification permission is required. Please enable it in settings to receive daily problems.</string>
    <string name="action_settings">Settings</string>
    <string name="explanation_title">Explanation</string>

    <string name="notification_primer_title">Daily Math Challenge</string>
    <string name="notification_primer_message">Would you like to receive a notification for your new math problem each day? You can change this at any time in the settings.</string>
    <string name="notification_primer_positive">Yes, please!</string>
    <string name="notification_primer_negative">Maybe later</string>

    <string name="bonus_problem_not_available">Bonus problem not available. Please try again later.</string>
    <string name="share_solved_format">I solved it! Can you?\n\n\"%1$s\"\n\nTest your skills with %2$s: %3$s</string>
    <string name="share_unsolved_format">Can you solve this problem from %1$s?\n\n\"%2$s\"\n\nGet your daily challenge: %3$s</string>
    <string name="question_format">%1$s = ?</string>
    <string name="default_explanation">The correct answer is %1$d.</string>
    <string name="hint">Hint</string>
    <string name="hero_level_description">Current Math Hero Level</string>

    <string name="ranks_title">Hero Ranks</string>
    <string name="rank_locked">x???x</string>
    <string name="rank_up_title">Rank Up!</string>
    <string name="rank_up_message">Congratulations! You have achieved the rank of %1$s!</string>

    <string name="rank_novice">Novice</string>
    <string name="rank_apprentice">Apprentice</string>
    <string name="rank_adept">Adept</string>
    <string name="rank_specialist">Specialist</string>
    <string name="rank_expert">Expert</string>
    <string name="rank_master">Master</string>
    <string name="rank_grandmaster">Grandmaster</string>
    <string name="rank_legend">Legend</string>
    <string name="rank_mythic">Mythic</string>
    <string name="rank_titan">Titan</string>

    <string name="save_streak_dialog_title">Oh no!</string>
    <string name="save_streak_dialog_message">You broke your streak! Would you like to save your progress?</string>
    <string name="save_streak_dialog_positive_button">Save My Streak (Ad)</string>
    <string name="save_streak_dialog_positive_button_pro">Save My Streak (PRO Perk)</string>
    <string name="save_streak_dialog_negative_button">Reset My Streak</string>
    <string name="rank_requirement_unlocked">Achieved at %d streak</string>
    <string name="rank_requirement_locked">Requires %d streak</string>

    <string name="difficulty">Difficulty</string>
    <string name="difficulty_selection_title">Choose Your Challenge</string>
    <string name="difficulty_selection_subtitle">Select a level to start. You can change this later in the settings.</string>
    <string name="difficulty_novice">Novice</string>
    <string name="difficulty_novice_desc">Simple addition with numbers up to 10.</string>
    <string name="difficulty_apprentice">Apprentice</string>
    <string name="difficulty_apprentice_desc">Addition and subtraction with numbers up to 20.</string>
    <string name="difficulty_adept">Adept</string>
    <string name="difficulty_adept_desc">Addition and subtraction with numbers up to 50.</string>
    <string name="difficulty_expert">Expert</string>
    <string name="difficulty_expert_desc">Addition, subtraction, and multiplication with numbers up to 20.</string>
    <string name="difficulty_master">Master</string>
    <string name="difficulty_master_desc">All operations: addition, subtraction, multiplication, and division with numbers up to 100.</string>
    <string name="suggest_lower_difficulty_title">Finding it Tricky?</string>
    <string name="suggest_lower_difficulty_message">It looks like you\'re finding this level a bit challenging. Would you like to try an easier difficulty?</string>
    <string name="change_difficulty">Change Difficulty</string>
    <string name="keep_going">Keep Going</string>
    <string name="enable_sound_effects">Enable sound effects</string>
    <string name="next_problem">Next Problem</string>
    <string name="difficulty_presets">Presets</string>
    <string name="difficulty_customize">Or Create Your Own</string>
    <string name="operations">Operations</string>
    <string name="largest_number">Largest Number</string>
    <string name="save">Save</string>
    <string name="error_no_operation_selected">Please select at least one operation.</string>
    <string name="custom_difficulty_desc">Custom: %1$s up to %2$d</string>

    <string name="streak_saved_pro">Your streak is safe! (PRO Perk)</string>
    <string name="progress_report">Progress Report</string>
    <string name="upgrade_to_pro">Upgrade to PRO</string>
    <string name="upgrade_to_pro_price">Upgrade to PRO (%s)</string>
    <string name="pro_user_status">You are a PRO user!</string>
    <string name="progress_locked_title">Unlock Progress Reports</string>
    <string name="progress_locked_desc">Upgrade to PRO to see detailed reports on accuracy, weekly progress, and more!</string>
    <string name="progress_summary">Summary</string>
    <string name="progress_accuracy">Accuracy by Operation</string>
    <string name="progress_total_solved">Total Problems Solved: %d</string>
    <string name="progress_last_7_days">Solved in Last 7 Days: %d</string>
    <string name="progress_average_per_day">Average Per Day: %s</string>
    <string name="progress_longest_streak">Longest Streak: %d</string>
    <string name="progress_no_accuracy_data">Solve some problems to see your accuracy stats here!</string>
    <string name="progress_percentage">%d%%</string>
    <string name="progress_accuracy_details">%1$d correct out of %2$d</string>

    <string-array name="addition_explanations">
        <item>To add %1$d and %2$d, you can think of having %1$d items and getting %2$d more. Counting them all together gives you %3$d!</item>
        <item>Imagine you have %1$d blocks. If you add %2$d more blocks, you will have a total of %3$d blocks. Great job!</item>
        <item>Starting at %1$d and counting up %2$d more steps on a number line lands you right on %3$d. That\'s the answer!</item>
        <item>When you combine a group of %1$d with a group of %2$d, the new, bigger group has %3$d things in it.</item>
        <item>Adding is like putting things together. So, %1$d plus %2$d makes %3$d.</item>
        <item>If a superhero has %1$d powers and learns %2$d new ones, they now have %3$d amazing powers!</item>
        <item>You found %1$d shiny rocks, and your friend gave you %2$d more. Now you have a collection of %3$d rocks!</item>
        <item>A plant was %1$d inches tall. After some sunshine and water, it grew %2$d more inches. Now it\'s %3$d inches tall!</item>
        <item>Let\'s use our fingers! Count %1$d fingers, then count %2$d more. All together, you have %3$d fingers up.</item>
        <item>A bus has %1$d people on it. At the next stop, %2$d more people get on. The bus is now carrying %3$d people.</item>
        <item>If you read %1$d pages of a book yesterday and %2$d pages today, you have read %3$d pages in total.</item>
        <item>A recipe needs %1$d cups of flour and %2$d cups of sugar. The total amount of dry ingredients is %3$d cups.</item>
        <item>You have %1$d stickers, and you win %2$d more. Your sticker book now has %3$d awesome stickers!</item>
        <item>Two teams are playing. One team scores %1$d points, and the other scores %2$d points. The total score is %3$d points.</item>
        <item>Think of it as climbing a ladder. You climb %1$d steps, take a break, and then climb %2$d more. You\'ve climbed %3$d steps!</item>
        <item>A cat has %1$d toys and its owner buys %2$d new ones. The lucky cat now has %3$d toys to play with.</item>
        <item>In a video game, you collected %1$d coins in one level and %2$d in the next. Your total is %3$d coins!</item>
        <item>A puzzle has two sections. One has %1$d pieces, and the other has %2$d pieces. The whole puzzle has %3$d pieces.</item>
        <item>If you save %1$d dollars and then earn %2$d more, your piggy bank will have %3$d dollars inside.</item>
        <item>Combining %1$d and %2$d is like merging two small streams into a big river. The result is a mighty %3$d!</item>
        <item>If a magical gnome has %1$d shiny gems and finds %2$d more in a sparkling cave, they now have %3$d gems in their treasure pouch!</item>
        <item>Picture a friendly dragon with %1$d cookies. If you give it %2$d more, it will happily munch on %3$d cookies!</item>
        <item>On a big, green lily pad sat %1$d frogs. When %2$d more froggy friends hopped on, there was a party of %3$d frogs!</item>
        <item>You built a tower with %1$d blocks. Your friend added %2$d more blocks on top. Wow! Your tower is now %3$d blocks tall!</item>
        <item>Imagine you have %1$d happy thoughts. If you think of %2$d more, your mind will be filled with %3$d happy thoughts!</item>
    </string-array>

    <string-array name="subtraction_explanations">
        <item>Subtracting %2$d from %1$d means you start with %1$d items and take %2$d away. You are left with %3$d.</item>
        <item>If you have %1$d cookies and eat %2$d of them, you will have %3$d cookies left. Yum!</item>
        <item>On a number line, if you start at %1$d and move back %2$d spaces, you will land on %3$d.</item>
        <item>The difference between %1$d and %2$d is %3$d. It\'s what\'s left when you take the smaller number from the bigger one.</item>
        <item>Taking away %2$d from %1$d leaves you with %3$d. It\'s like reverse adding!</item>
        <item>A superhero fought %1$d villains and defeated %2$d of them. There are %3$d villains left to catch!</item>
        <item>You have %1$d balloons, but %2$d of them pop! Oh no! You now have %3$d balloons.</item>
        <item>A tree had %1$d apples. If %2$d apples fall to the ground, there are still %3$d apples on the tree.</item>
        <item>You start with %1$d pieces of candy and share %2$d with your friends. You get to keep %3$d pieces for yourself.</item>
        <item>A spaceship is on a %1$d-day mission. If %2$d days have already passed, there are %3$d days left in the mission.</item>
        <item>If a book has %1$d pages and you have already read %2$d of them, you only have %3$d pages left to read.</item>
        <item>You have %1$d dollars and you spend %2$d on a toy. You will have %3$d dollars remaining.</item>
        <item>A tower made of %1$d blocks has %2$d blocks knocked off the top. The tower is now %3$d blocks high.</item>
        <item>There are %1$d birds sitting on a wire. If %2$d of them fly away, %3$d birds are left.</item>
        <item>What number do you need to add to %2$d to get to %1$d? That number is %3$d!</item>
        <item>Imagine a race that is %1$d miles long. If you have already run %2$d miles, you have %3$d miles to go.</item>
        <item>A full glass has %1$d ounces of juice. After you drink %2$d ounces, there are %3$d ounces left.</item>
        <item>If you need to find %1$d hidden treasures and you\'ve already found %2$d, there are %3$d still waiting to be discovered.</item>
        <item>A group of %1$d penguins is on an iceberg. If %2$d of them jump into the water, %3$d penguins remain on the ice.</item>
        <item>Subtraction is finding out how much is left. When %2$d is taken from %1$d, the amount left is %3$d.</item>
        <item>A fluffy cloud was holding %1$d raindrops. After %2$d drops fell, the cloud had %3$d raindrops left, waiting for another day.</item>
        <item>A little squirrel gathered %1$d acorns for the winter. If it ate %2$d for a snack, it still has %3$d acorns saved up.</item>
        <item>There were %1$d magical fireflies lighting up the night. When %2$d flew away to say hello to the moon, %3$d fireflies remained.</item>
        <item>You had %1$d puzzle pieces. After fitting %2$d pieces into the puzzle, you only have %3$d left to find a place for!</item>
        <item>A spaceship had %1$d alien passengers. When %2$d aliens got off at Planet Giggles, there were %3$d passengers left on board.</item>
    </string-array>

    <string-array name="multiplication_explanations">
        <item>Multiplying %1$d by %2$d is like adding %1$d to itself %2$d times. That gives you a total of %3$d.</item>
        <item>Imagine you have %2$d bags, and each bag has %1$d marbles. In total, you have %3$d marbles!</item>
        <item>This is asking for %2$d groups of %1$d. If you count all the items in all the groups, you get %3$d.</item>
        <item>Multiplication is a fast way to add. %1$d times %2$d is the same as %1$d + %1$d… (%2$d times), which equals %3$d.</item>
        <item>When you see %1$d × %2$d, it means you have %1$d repeated %2$d times. The result is a big %3$d!</item>
        <item>If a superhero can lift %1$d cars, and there are %2$d superheroes, together they can lift %3$d cars! Wow!</item>
        <item>In a garden, there are %2$d rows of flowers, with %1$d flowers in each row. That makes a beautiful garden of %3$d flowers.</item>
        <item>If you get %1$d stickers on a page, and you have %2$d pages, you have a giant collection of %3$d stickers.</item>
        <item>A box of crayons has %1$d colors. If you have %2$d boxes, you have %3$d crayons to draw with.</item>
        <item>An octopus has 8 arms. If there were %1$d octopuses (and each had %2$d arms), they would have %3$d arms all together!</item>
        <item>If a car has %1$d wheels, then %2$d cars would have a total of %3$d wheels rolling down the street.</item>
        <item>You are building with blocks. You make %2$d towers, and each tower is %1$d blocks high. You used %3$d blocks in total.</item>
        <item>A cookie recipe makes %1$d cookies per batch. If you make %2$d batches, you will have %3$d cookies to share.</item>
        <item>If a video game level gives you %1$d points, and you beat %2$d levels, you will earn %3$d points.</item>
        <item>Think of a grid. A grid with %1$d rows and %2$d columns has a total of %3$d squares inside it.</item>
        <item>If a book costs %1$d dollars, and you want to buy %2$d of them for your friends, you will need %3$d dollars.</item>
        <item>A spider has 8 legs. If you saw %1$d spiders (and each had %2$d legs), you would see %3$d legs crawling around!</item>
        <item>Each pack of juice has %1$d cartons. If you buy %2$d packs, you will have %3$d juice cartons.</item>
        <item>If you save %1$d dollars every week for %2$d weeks, you will have saved up %3$d dollars.</item>
        <item>Multiplication helps you count big groups quickly. %2$d groups of %1$d is always %3$d.</item>
        <item>If one magical spell requires %1$d star sparkles, and a wizard casts the spell %2$d times, they will use a total of %3$d sparkles!</item>
        <item>A super-fast cheetah has %1$d spots on one leg. If you could count the spots on all %2$d legs, you\'d find %3$d spots!</item>
        <item>Each flower in the enchanted garden has %1$d petals. If you pick a bouquet of %2$d flowers, you\'ll have %3$d beautiful petals.</item>
        <item>A baker makes special cupcakes in batches of %1$d. If they bake %2$d batches, they will have %3$d yummy cupcakes to sell!</item>
        <item>In a video game, each treasure chest gives you %1$d gold coins. If you find %2$d chests, you\'ll be rich with %3$d coins!</item>
    </string-array>

    <string-array name="division_explanations">
        <item>Dividing %1$d by %2$d means you are splitting %1$d into %2$d equal groups. Each group will have %3$d items.</item>
        <item>If you have %1$d stickers to share equally among %2$d friends, each friend gets %3$d stickers.</item>
        <item>Division asks, "How many times does %2$d fit into %1$d?" The answer is exactly %3$d times!</item>
        <item>Think of it like this: %2$d times what number equals %1$d? That missing number is %3$d. That\'s division!</item>
        <item>When you break down %1$d into %2$d smaller, even parts, each part is %3$d. Well done!</item>
        <item>A superhero has %1$d gadgets and wants to put them into %2$d utility belts, with the same number in each. Each belt will hold %3$d gadgets.</item>
        <item>You baked %1$d cookies and want to put them into bags with %2$d cookies each. You can make %3$d bags.</item>
        <item>A pizza is cut into %1$d slices. If %2$d people are sharing it equally, each person gets to eat %3$d slices.</item>
        <item>A team of %1$d players needs to be split into %2$d smaller teams. Each smaller team will have %3$d players.</item>
        <item>If you have a rope that is %1$d feet long and you cut it into %2$d equal pieces, each piece will be %3$d feet long.</item>
        <item>Dealing cards! If you have %1$d cards and %2$d players, you can deal each player %3$d cards.</item>
        <item>A book has %1$d pages. If you want to read it in %2$d days, reading the same amount each day, you should read %3$d pages per day.</item>
        <item>You have %1$d toys to put away on %2$d shelves. To be fair, you should put %3$d toys on each shelf.</item>
        <item>A total of %1$d dollars was found and is being shared by %2$d people. Each person gets a fair share of %3$d dollars.</item>
        <item>Division is like fair sharing. When you share %1$d among %2$d, everybody gets %3$d.</item>
        <item>How many groups of %2$d can you make from %1$d? You can make exactly %3$d groups.</item>
        <item>A car trip is %1$d miles long. If you want to finish it in %2$d hours, you need to travel %3$d miles each hour.</item>
        <item>You have %1$d building blocks and want to make towers that are %2$d blocks tall. You can build %3$d towers.</item>
        <item>A farmer collected %1$d eggs and puts them into cartons that hold %2$d eggs each. The farmer can fill %3$d cartons.</item>
        <item>Division is the opposite of multiplication. Since %2$d × %3$d = %1$d, we know that %1$d ÷ %2$d = %3$d.</item>
        <item>A pirate found a treasure of %1$d gold coins! To share it fairly with a crew of %2$d pirates, each pirate gets %3$d shiny coins.</item>
        <item>A mother bird has %1$d yummy worms to feed her %2$d baby birds. Each baby gets to eat %3$d worms. Chirp chirp!</item>
        <item>You have %1$d storybooks to put on your bookshelf. If each shelf can hold %2$d books, you can fill up %3$d shelves.</item>
        <item>A group of %1$d friendly aliens wants to ride a rollercoaster. If each car fits %2$d aliens, they will need %3$d cars for everyone to ride!</item>
        <item>You have %1$d beads to make bracelets. If each bracelet needs %2$d beads, you can create %3$d beautiful bracelets for your friends.</item>
    </string-array>
</resources>
-----------------------------------------------------------------------------
File: themes.xml
Path: 
Content:
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.mathhero" parent="Theme.Material3.DayNight.NoActionBar">
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorOnPrimary">@color/colorOnPrimary</item>
        <item name="colorPrimaryContainer">@color/colorPrimaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/colorOnPrimaryContainer</item>
        <item name="colorSecondary">@color/colorSecondary</item>
        <item name="colorOnSecondary">@color/colorOnSecondary</item>
        <item name="colorSecondaryContainer">@color/colorSecondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/colorOnSecondaryContainer</item>
        <item name="colorTertiary">@color/colorTertiary</item>
        <item name="colorOnTertiary">@color/colorOnTertiary</item>
        <item name="colorTertiaryContainer">@color/colorTertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/colorOnTertiaryContainer</item>
        <item name="colorError">@color/colorError</item>
        <item name="colorOnError">@color/colorOnError</item>
        <item name="colorErrorContainer">@color/colorErrorContainer</item>
        <item name="colorOnErrorContainer">@color/colorOnErrorContainer</item>
        <item name="android:colorBackground">@color/colorBackground</item>
        <item name="colorOnBackground">@color/colorOnBackground</item>
        <item name="colorSurface">@color/colorSurface</item>
        <item name="colorOnSurface">@color/colorOnSurface</item>
        <item name="colorSurfaceVariant">@color/colorSurfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/colorOnSurfaceVariant</item>
        <item name="colorOutline">@color/colorOutline</item>
        <item name="colorOnSurfaceInverse">@color/colorInverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/colorInverseSurface</item>
        <item name="colorPrimaryInverse">@color/colorInversePrimary</item>

        <!-- Typography -->
        <item name="android:fontFamily">@font/montserrat</item>
        <item name="fontFamily">@font/montserrat</item>
        <item name="textAppearanceHeadline6">@style/TextAppearance.App.Headline6</item>
        <item name="textAppearanceHeadline5">@style/TextAppearance.App.Headline5</item>
        <item name="textAppearanceBody2">@style/TextAppearance.App.Body2</item>
        <item name="textAppearanceBodyLarge">@style/TextAppearance.App.BodyLarge</item>
        <item name="textAppearanceTitleMedium">@style/TextAppearance.App.TitleMedium</item>

        <!-- System Bar Colors -->
        <item name="android:statusBarColor">?attr/colorSurface</item>
        <item name="android:navigationBarColor">?attr/colorSurface</item>
    </style>

    <style name="TextAppearance.App.Headline6" parent="TextAppearance.MaterialComponents.Headline6">
        <item name="fontFamily">@font/merriweather</item>
        <item name="android:fontFamily">@font/merriweather</item>
    </style>

    <style name="TextAppearance.App.Headline5" parent="TextAppearance.MaterialComponents.Headline5">
        <item name="fontFamily">@font/merriweather</item>
        <item name="android:fontFamily">@font/merriweather</item>
    </style>

    <style name="TextAppearance.App.Body2" parent="TextAppearance.MaterialComponents.Body2">
        <item name="android:lineSpacingMultiplier">1.2</item>
    </style>

    <style name="TextAppearance.App.BodyLarge" parent="TextAppearance.Material3.BodyLarge">
        <item name="android:lineSpacingMultiplier">1.2</item>
    </style>

    <style name="TextAppearance.App.TitleMedium" parent="TextAppearance.Material3.TitleMedium">
        <item name="fontFamily">@font/merriweather</item>
        <item name="android:fontFamily">@font/merriweather</item>
    </style>

    <style name="Theme.mathhero" parent="Base.Theme.mathhero" />

    <style name="Theme.App.Starting" parent="Theme.SplashScreen">
        <item name="windowSplashScreenBackground">@color/colorBackground</item>
        <item name="windowSplashScreenAnimatedIcon">@drawable/ic_launcher_foreground</item>
        <item name="postSplashScreenTheme">@style/Theme.mathhero</item>
    </style>

    <style name="FullScreenDialog" parent="Theme.mathhero">
        <item name="android:windowIsFloating">false</item>
        <item name="android:windowBackground">?attr/colorSurface</item>
        <item name="android:windowEnterAnimation">@android:anim/fade_in</item>
        <item name="android:windowExitAnimation">@android:anim/fade_out</item>
    </style>

    <style name="RatingBar" parent="Theme.AppCompat">
        <item name="colorControlNormal">?attr/colorOutline</item>
        <item name="colorControlActivated">?attr/colorPrimary</item>
    </style>
</resources>
-----------------------------------------------------------------------------
File: strings.xml
Path: 
Content:
<resources>
    <string name="app_name">גיבור חשבון</string>
    <string name="share_problem_title">שיתוף בעיה</string>
    <string name="archive">ארכיון</string>
    <string name="no_problem_available">אין בעיות חשבון זמינות. אנא חזור/י מחר.</string>
    <string name="disclaimer_title">ברוכים הבאים לגיבור חשבון</string>
    <string name="disclaimer_message">המטרה שלנו היא להפוך את לימוד המתמטיקה לחוויה מהנה. תהנו מהאתגר היומי!</string>
    <string name="notification_channel_name">בעיות חשבון יומיות</string>
    <string name="notification_channel_description">קבלת התראה יומית עם בעיית החשבון של היום.</string>
    <string name="notification_title">אתגר החשבון היומי שלך מחכה!</string>
    <string name="notification_text">לחץ/י כדי לפתור את בעיית החשבון של היום.</string>
    <string name="notifications_disabled_toast">ההתראות כבויות. ניתן להפעיל אותן בהגדרות האפליקציה.</string>
    <string name="archive_title">בעיות קודמות</string>
    <string name="close">סגירה</string>
    <string name="archive_empty">הארכיון ריק. בעיות שפתרת יופיעו כאן!</string>
    <string name="rate_app">דרג/י את האפליקציה</string>
    <string name="privacy_policy">מדיניות פרטיות</string>
    <string name="privacy_policy_title">מדיניות פרטיות</string>
    <string name="privacy_policy_text">אפליקציה זו, גיבור חשבון, היא אפליקציה עצמאית שאינה אוספת, מאחסנת או משתפת נתוני משתמש אישיים. כל הבעיות כלולות בתוך האפליקציה.\n\nשירותי צד שלישי:\n- Google AdMob: כדי לתמוך באפליקציה, אנו משתמשים ב-Google AdMob לפרסום. AdMob עשוי לאסוף נתונים כדי לספק מודעות מותאמות אישית. למידע נוסף, עיין/י במדיניות הפרטיות של גוגל.\n- Google Play Services: האפליקציה עשויה להשתמש בשירותי Google Play לפונקציות ליבה.\n\nעל ידי שימוש באפליקציה זו, את/ה מסכים/ה למדיניות זו.</string>
    <string name="streak_counter_description">מונה רצף יומי</string>
    <string name="confirm_answer">אישור תשובה</string>
    <string name="notification_action_reveal">גלה/י את התשובה</string>
    <string name="notification_action_solved">פתרתי!</string>
    <string name="notification_answer_title">התשובה היא…</string>
    <string name="settings">הגדרות</string>
    <string name="open_source_licenses">רישיונות קוד פתוח</string>
    <string name="notifications_title">התראות</string>
    <string name="enable_daily_problem_notification">הפעל התראות לבעיית חשבון יומית</string>
    <string name="notification_permission_required">נדרשת הרשאה לשליחת התראות. אנא הפעל/י אותה בהגדרות כדי לקבל אתגרים יומיים.</string>
    <string name="action_settings">הגדרות</string>
    <string name="explanation_title">הסבר</string>

    <string name="notification_primer_title">אתגר חשבון יומי</string>
    <string name="notification_primer_message">האם תרצה/י לקבל התראה יומית עם בעיית חשבון חדשה? ניתן לשנות זאת בכל עת בהגדרות.</string>
    <string name="notification_primer_positive">כן, בטח!</string>
    <string name="notification_primer_negative">אולי בפעם אחרת</string>

    <string name="bonus_problem_not_available">בעיית הבונוס אינה זמינה כעת. אנא נסה/י שוב מאוחר יותר.</string>
    <string name="share_solved_format">פתרתי את זה! מה איתך?\n\n\"%1$s\"\n\nבחן/י את כישוריך עם %2$s: %3$s</string>
    <string name="share_unsolved_format">האם תצליח/י לפתור את הבעיה הזו מ-%1$s?\n\n\"%2$s\"\n\nהורד/י את האפליקציה לאתגר יומי: %3$s</string>
    <string name="question_format">%1$s = ?</string>
    <string name="default_explanation">התשובה הנכונה היא %1$d.</string>
    <string name="hint">רמז</string>
    <string name="hero_level_description">דרגת גיבור החשבון הנוכחית</string>

    <string name="ranks_title">דרגות הגיבור</string>
    <string name="rank_locked">נעול</string>
    <string name="rank_up_title">עלית דרגה!</string>
    <string name="rank_up_message">כל הכבוד! עלית לדרגת %1$s!</string>

    <string name="rank_novice">טירון</string>
    <string name="rank_apprentice">שוליה</string>
    <string name="rank_adept">מומחה</string>
    <string name="rank_specialist">מומחה בכיר</string>
    <string name="rank_expert">אמן</string>
    <string name="rank_master">מאסטר</string>
    <string name="rank_grandmaster">רב-אמן</string>
    <string name="rank_legend">אגדה</string>
    <string name="rank_mythic">מיתי</string>
    <string name="rank_titan">טיטאן</string>

    <string name="save_streak_dialog_title">אוי לא!</string>
    <string name="save_streak_dialog_message">הרצף שלך נשבר! האם תרצה/י לשמור על ההתקדמות שלך?</string>
    <string name="save_streak_dialog_positive_button">שמור/י על הרצף (מודעה)</string>
    <string name="save_streak_dialog_positive_button_pro">שמור/י על הרצף (הטבת PRO)</string>
    <string name="save_streak_dialog_negative_button">אפס/י את הרצף</string>
    <string name="rank_requirement_unlocked">הושג ברצף של %d</string>
    <string name="rank_requirement_locked">דורש רצף של %d</string>

    <string name="difficulty">רמת קושי</string>
    <string name="difficulty_selection_title">בחר/י את האתגר שלך</string>
    <string name="difficulty_selection_subtitle">בחר/י רמה כדי להתחיל. ניתן לשנות זאת מאוחר יותר בהגדרות.</string>
    <string name="difficulty_novice">טירון</string>
    <string name="difficulty_novice_desc">חיבור פשוט עם מספרים עד 10.</string>
    <string name="difficulty_apprentice">שוליה</string>
    <string name="difficulty_apprentice_desc">חיבור וחיסור עם מספרים עד 20.</string>
    <string name="difficulty_adept">מומחה</string>
    <string name="difficulty_adept_desc">חיבור וחיסור עם מספרים עד 50.</string>
    <string name="difficulty_expert">אמן</string>
    <string name="difficulty_expert_desc">חיבור, חיסור וכפל עם מספרים עד 20.</string>
    <string name="difficulty_master">מאסטר</string>
    <string name="difficulty_master_desc">כל הפעולות: חיבור, חיסור, כפל וחילוק עם מספרים עד 100.</string>
    <string name="suggest_lower_difficulty_title">קצת מאתגר?</string>
    <string name="suggest_lower_difficulty_message">נראה שהרמה הנוכחית מעט מאתגרת. האם תרצה/י לנסות רמת קושי נמוכה יותר?</string>
    <string name="change_difficulty">שנה/י רמת קושי</string>
    <string name="keep_going">להמשיך</string>
    <string name="enable_sound_effects">הפעל אפקטים קוליים</string>
    <string name="next_problem">הבעיה הבאה</string>
    <string name="difficulty_presets">רמות מוכנות</string>
    <string name="difficulty_customize">או בהתאמה אישית</string>
    <string name="operations">פעולות חשבון</string>
    <string name="largest_number">המספר הגדול ביותר</string>
    <string name="save">שמירה</string>
    <string name="error_no_operation_selected">יש לבחור לפחות פעולת חשבון אחת.</string>
    <string name="custom_difficulty_desc">מותאם: %1$s עד %2$d</string>

    <string name="streak_saved_pro">הרצף שלך בטוח! (הטבת PRO)</string>
    <string name="progress_report">דוח התקדמות</string>
    <string name="upgrade_to_pro">שדרוג ל-PRO</string>
    <string name="upgrade_to_pro_price">שדרוג ל-PRO (%s)</string>
    <string name="pro_user_status">את/ה משתמש/ת PRO!</string>
    <string name="progress_locked_title">גלה/י דוחות התקדמות</string>
    <string name="progress_locked_desc">שדרג/י ל-PRO כדי לראות דוחות מפורטים על דיוק, התקדמות שבועית ועוד!</string>
    <string name="progress_summary">סיכום</string>
    <string name="progress_accuracy">דיוק לפי פעולה</string>
    <string name="progress_total_solved">סה"כ בעיות שנפתרו: %d</string>
    <string name="progress_last_7_days">נפתרו ב-7 הימים האחרונים: %d</string>
    <string name="progress_average_per_day">ממוצע ליום: %s</string>
    <string name="progress_longest_streak">רצף שיא: %d</string>
    <string name="progress_no_accuracy_data">פתור/י כמה בעיות כדי לראות את סטטיסטיקת הדיוק שלך כאן!</string>
    <string name="progress_percentage">%d%%</string>
    <string name="progress_accuracy_details">%1$d נכונות מתוך %2$d</string>

    <string-array name="addition_explanations">
        <item>כדי לחבר %1$d ו-%2$d, אפשר לחשוב שיש לך %1$d פריטים ואתה מקבל עוד %2$d. לספור את כולם יחד נותן לך %3$d!</item>
        <item>דמיין/י שיש לך %1$d קוביות. אם תוסיף/י עוד %2$d קוביות, יהיו לך בסך הכל %3$d קוביות. כל הכבוד!</item>
        <item>התחלה מ-%1$d וספירה של עוד %2$d צעדים על ציר המספרים תביא אותך בדיוק ל-%3$d. זאת התשובה!</item>
        <item>כשאתה משלב קבוצה של %1$d עם קבוצה של %2$d, הקבוצה החדשה והגדולה יותר מכילה %3$d דברים.</item>
        <item>חיבור זה כמו לשים דברים יחד. אז, %1$d ועוד %2$d יוצרים %3$d.</item>
        <item>אם לגיבור-על יש %1$d כוחות והוא לומד %2$d חדשים, עכשיו יש לו %3$d כוחות מדהימים!</item>
        <item>מצאת %1$d אבנים נוצצות, וחבר נתן לך עוד %2$d. עכשיו יש לך אוסף של %3$d אבנים!</item>
        <item>צמח היה בגובה %1$d סנטימטרים. אחרי קצת שמש ומים, הוא צמח בעוד %2$d סנטימטרים. עכשיו גובהו %3$d סנטימטרים!</item>
        <item>בוא/י נשתמש באצבעות! ספר/י %1$d אצבעות, ואז עוד %2$d. בסך הכל, הרמת %3$d אצבעות.</item>
        <item>באוטובוס יש %1$d אנשים. בתחנה הבאה, עוד %2$d אנשים עולים. האוטובוס נוסע עכשיו עם %3$d אנשים.</item>
        <item>אם קראת %1$d עמודים בספר אתמול ו-%2$d עמודים היום, קראת בסך הכל %3$d עמודים.</item>
        <item>מתכון דורש %1$d כוסות קמח ו-%2$d כוסות סוכר. הכמות הכוללת של המרכיבים היבשים היא %3$d כוסות.</item>
        <item>יש לך %1$d מדבקות, וזכית בעוד %2$d. באלבום המדבקות שלך יש עכשיו %3$d מדבקות מדהימות!</item>
        <item>שתי קבוצות משחקות. קבוצה אחת קלעה %1$d נקודות, והשנייה %2$d נקודות. התוצאה הכוללת היא %3$d נקודות.</item>
        <item>חשוב/י על זה כמו טיפוס על סולם. טיפסת %1$d שלבים, לקחת הפסקה, ואז טיפסת עוד %2$d. טיפסת %3$d שלבים!</item>
        <item>לחתול יש %1$d צעצועים והבעלים שלו קונה לו %2$d חדשים. לחתול המאושר יש עכשיו %3$d צעצועים לשחק איתם.</item>
        <item>במשחק וידאו, אספת %1$d מטבעות בשלב אחד ו-%2$d בשלב הבא. הסכום הכולל שלך הוא %3$d מטבעות!</item>
        <item>לפאזל יש שני חלקים. באחד יש %1$d חלקים, ובשני %2$d. הפאזל השלם מורכב מ-%3$d חלקים.</item>
        <item>אם חסכת %1$d שקלים ואז הרווחת עוד %2$d, בקופת החיסכון שלך יהיו %3$d שקלים.</item>
        <item>לשלב %1$d ו-%2$d זה כמו למזג שני נחלים קטנים לנהר גדול. התוצאה היא %3$d אדיר!</item>
        <item>אם לגמד קסום יש %1$d אבני חן נוצצות והוא מוצא עוד %2$d במערה מנצנצת, עכשיו יש לו %3$d אבני חן בכיס האוצר שלו!</item>
        <item>דמיין/י דרקון חברותי עם %1$d עוגיות. אם תיתן/י לו עוד %2$d, הוא ינשנש בשמחה %3$d עוגיות!</item>
        <item>על עלה שושן מים גדול וירוק ישבו %1$d צפרדעים. כש-%2$d חברים צפרדעים נוספים קפצו עליו, התקיימה מסיבה של %3$d צפרדעים!</item>
        <item>בנית מגדל עם %1$d קוביות. חבר שלך הוסיף עוד %2$d קוביות למעלה. וואו! המגדל שלך עכשיו בגובה %3$d קוביות!</item>
        <item>דמיין/י שיש לך %1$d מחשבות שמחות. אם תחשוב/בי על עוד %2$d, המוח שלך יתמלא ב-%3$d מחשבות שמחות!</item>
    </string-array>

    <string-array name="subtraction_explanations">
        <item>חיסור של %2$d מ-%1$d אומר שאתה מתחיל עם %1$d פריטים ולוקח %2$d מהם. נשארת עם %3$d.</item>
        <item>אם יש לך %1$d עוגיות ואת/ה אוכל/ת %2$d מהן, יישארו לך %3$d עוגיות. יאמי!</item>
        <item>על ציר מספרים, אם תתחיל/י ב-%1$d ותזוז/י אחורה %2$d צעדים, תנחת/י על %3$d.</item>
        <item>ההבדל בין %1$d ל-%2$d הוא %3$d. זה מה שנשאר כשאתה לוקח את המספר הקטן מהגדול.</item>
        <item>לקחת %2$d מ-%1$d משאיר אותך עם %3$d. זה כמו חיבור הפוך!</item>
        <item>גיבור-על נלחם ב-%1$d נבלים והביס %2$d מהם. נשארו %3$d נבלים לתפוס!</item>
        <item>יש לך %1$d בלונים, אבל %2$d מהם התפוצצו! אוי לא! עכשיו יש לך %3$d בלונים.</item>
        <item>על עץ היו %1$d תפוחים. אם %2$d תפוחים נפלו על האדמה, עדיין יש %3$d תפוחים על העץ.</item>
        <item>התחלת עם %1$d ממתקים וחלקת %2$d עם חברים. נשארו לך %3$d ממתקים לעצמך.</item>
        <item>חללית נמצאת במשימה של %1$d ימים. אם כבר עברו %2$d ימים, נשארו %3$d ימים למשימה.</item>
        <item>אם בספר יש %1$d עמודים וכבר קראת %2$d מהם, נשארו לך רק %3$d עמודים לקרוא.</item>
        <item>יש לך %1$d שקלים ואת/ה מוציא/ה %2$d על צעצוע. יישארו לך %3$d שקלים.</item>
        <item>מגדל שנבנה מ-%1$d קוביות איבד %2$d קוביות מהחלק העליון. המגדל עכשיו בגובה %3$d קוביות.</item>
        <item>יש %1$d ציפורים על חוט חשמל. אם %2$d מהן עפו, נשארו %3$d ציפורים.</item>
        <item>איזה מספר צריך להוסיף ל-%2$d כדי להגיע ל-%1$d? המספר הזה הוא %3$d!</item>
        <item>דמיין/י מרוץ באורך %1$d קילומטרים. אם כבר רצת %2$d קילומטרים, נשארו לך עוד %3$d.</item>
        <item>בכוס מלאה יש %1$d מ"ל מיץ. אחרי ששתית %2$d מ"ל, נשארו %3$d מ"ל.</item>
        <item>אם את/ה צריך/ה למצוא %1$d אוצרות חבויים וכבר מצאת %2$d, יש עוד %3$d שמחכים להתגלות.</item>
        <item>קבוצה של %1$d פינגווינים נמצאת על קרחון. אם %2$d מהם קופצים למים, %3$d פינגווינים נשארים על הקרח.</item>
        <item>חיסור הוא למצוא כמה נשאר. כש-%2$d נלקח מ-%1$d, הכמות שנותרת היא %3$d.</item>
        <item>ענן רך החזיק %1$d טיפות גשם. אחרי ש-%2$d טיפות נפלו, נשארו בענן %3$d טיפות, שמחכות ליום אחר.</item>
        <item>סנאי קטן אסף %1$d בלוטים לחורף. אם הוא אכל %2$d כנשנוש, עדיין נשארו לו %3$d בלוטים שמורים.</item>
        <item>היו %1$d גחליליות קסומות שהאירו את הלילה. כש-%2$d מהן עפו כדי להגיד שלום לירח, נשארו %3$d גחליליות.</item>
        <item>היו לך %1$d חלקי פאזל. אחרי שהתאמת %2$d חלקים לפאזל, נשארו לך רק %3$d למצוא להם מקום!</item>
        <item>בחללית היו %1$d נוסעים חייזרים. כש-%2$d חייזרים ירדו בכוכב צחקוקים, נשארו %3$d נוסעים על הסיפון.</item>
    </string-array>

    <string-array name="multiplication_explanations">
        <item>להכפיל %1$d ב-%2$d זה כמו לחבר %1$d לעצמו %2$d פעמים. זה נותן לך סך הכל %3$d.</item>
        <item>דמיין/י שיש לך %2$d שקיות, ובכל שקית יש %1$d גולות. בסך הכל, יש לך %3$d גולות!</item>
        <item>זה מבקש %2$d קבוצות של %1$d. אם תספור/י את כל הפריטים בכל הקבוצות, תקבלי %3$d.</item>
        <item>כפל הוא דרך מהירה לחבר. %1$d כפול %2$d זהה ל-%1$d + %1$d… (%2$d פעמים), ששווה ל-%3$d.</item>
        <item>כשאת/ה רואה %1$d × %2$d, זה אומר שיש לך %1$d שחוזר על עצמו %2$d פעמים. התוצאה היא %3$d גדול!</item>
        <item>אם גיבור-על יכול להרים %1$d מכוניות, ו-%2$d גיבורי-על נמצאים שם, יחד הם יכולים להרים %3$d מכוניות! וואו!</item>
        <item>בגינה יש %2$d שורות של פרחים, עם %1$d פרחים בכל שורה. זה יוצר גינה יפהפייה של %3$d פרחים.</item>
        <item>אם את/ה מקבל/ת %1$d מדבקות בעמוד, ויש לך %2$d עמודים, יש לך אוסף ענק של %3$d מדבקות.</item>
        <item>בקופסת צבעים יש %1$d צבעים. אם יש לך %2$d קופסאות, יש לך %3$d צבעים לצייר איתם.</item>
        <item>לתמנון יש 8 זרועות. אם היו %1$d תמנונים (ולכל אחד %2$d זרועות), היו להם %3$d זרועות בסך הכל!</item>
        <item>אם למכונית יש %1$d גלגלים, אז ל-%2$d מכוניות יהיו בסך הכל %3$d גלגלים שמתגלגלים על הכביש.</item>
        <item>את/ה בונה בקוביות. את/ה יוצר/ת %2$d מגדלים, וכל מגדל בגובה %1$d קוביות. השתמשת ב-%3$d קוביות בסך הכל.</item>
        <item>מתכון לעוגיות מפיק %1$d עוגיות בכל אפייה. אם תכין/י %2$d נגלות, יהיו לך %3$d עוגיות לחלוק.</item>
        <item>אם שלב במשחק וידאו נותן לך %1$d נקודות, ואת/ה מנצח/ת %2$d שלבים, תרוויח/י %3$d נקודות.</item>
        <item>חשוב/י על רשת. רשת עם %1$d שורות ו-%2$d עמודות מכילה בסך הכל %3$d ריבועים.</item>
        <item>אם ספר עולה %1$d שקלים, ואת/ה רוצה לקנות %2$d מהם לחברים, תצטרך/י %3$d שקלים.</item>
        <item>לעכביש יש 8 רגליים. אם ראית %1$d עכבישים (ולכל אחד %2$d רגליים), היית רואה %3$d רגליים זוחלות!</item>
        <item>בכל מארז מיצים יש %1$d קרטוניות. אם תקנה/י %2$d מארזים, יהיו לך %3$d קרטוניות מיץ.</item>
        <item>אם תחסוך/כי %1$d שקלים כל שבוע במשך %2$d שבועות, תחסוך/כי %3$d שקלים.</item>
        <item>כפל עוזר לך לספור קבוצות גדולות במהירות. %2$d קבוצות של %1$d זה תמיד %3$d.</item>
        <item>אם כישוף קסום אחד דורש %1$d נצנוצי כוכבים, וקוסם מטיל את הכישוף %2$d פעמים, הוא ישתמש בסך הכל ב-%3$d נצנוצים!</item>
        <item>לצ\'יטה סופר-מהירה יש %1$d כתמים על רגל אחת. אם היית יכול/ה לספור את הכתמים על כל %2$d הרגליים, היית מוצא/ת %3$d כתמים!</item>
        <item>לכל פרח בגינה הקסומה יש %1$d עלי כותרת. אם תקטוף/פי זר של %2$d פרחים, יהיו לך %3$d עלי כותרת יפהפיים.</item>
        <item>אופה מכין קאפקייקס מיוחדים בקבוצות של %1$d. אם הוא יאפה %2$d קבוצות, יהיו לו %3$d קאפקייקס טעימים למכירה!</item>
        <item>במשחק וידאו, כל תיבת אוצר נותנת לך %1$d מטבעות זהב. אם תמצא/י %2$d תיבות, תהיה/י עשיר/ה עם %3$d מטבעות!</item>
    </string-array>

    <string-array name="division_explanations">
        <item>לחלק %1$d ב-%2$d אומר שאתה מפצל %1$d ל-%2$d קבוצות שוות. בכל קבוצה יהיו %3$d פריטים.</item>
        <item>אם יש לך %1$d מדבקות לחלוק שווה בשווה בין %2$d חברים, כל חבר יקבל %3$d מדבקות.</item>
        <item>חילוק שואל, "כמה פעמים %2$d נכנס ב-%1$d?" התשובה היא בדיוק %3$d פעמים!</item>
        <item>חשוב/י על זה כך: %2$d כפול איזה מספר שווה ל-%1$d? המספר החסר הוא %3$d. זה חילוק!</item>
        <item>כשאת/ה מפרק/ת %1$d ל-%2$d חלקים קטנים ואחידים, כל חלק הוא %3$d. כל הכבוד!</item>
        <item>לגיבור-על יש %1$d גאדג\'טים והוא רוצה לשים אותם ב-%2$d חגורות, עם אותו מספר בכל אחת. כל חגורה תחזיק %3$d גאדג\'טים.</item>
        <item>אפית %1$d עוגיות ורוצה לשים אותן בשקיות של %2$d עוגיות כל אחת. תוכלי להכין %3$d שקיות.</item>
        <item>פיצה נחתכה ל-%1$d משולשים. אם %2$d אנשים חולקים אותה שווה בשווה, כל אחד יאכל %3$d משולשים.</item>
        <item>קבוצה של %1$d שחקנים צריכה להתחלק ל-%2$d קבוצות קטנות יותר. בכל קבוצה קטנה יהיו %3$d שחקנים.</item>
        <item>אם יש לך חבל באורך %1$d מטרים ואת/ה חותך/ת אותו ל-%2$d חתיכות שוות, כל חתיכה תהיה באורך %3$d מטרים.</item>
        <item>מחלקים קלפים! אם יש לך %1$d קלפים ו-%2$d שחקנים, אפשר לחלק לכל שחקן %3$d קלפים.</item>
        <item>בספר יש %1$d עמודים. אם תרצה/י לקרוא אותו ב-%2$d ימים, ולקרוא כל יום אותו מספר עמודים, תצטרך/י לקרוא %3$d עמודים ביום.</item>
        <item>יש לך %1$d צעצועים לסדר על %2$d מדפים. כדי שיהיה מסודר, צריך לשים %3$d צעצועים על כל מדף.</item>
        <item>סכום של %1$d שקלים נמצא והוא מחולק בין %2$d אנשים. כל אחד מקבל חלק שווה של %3$d שקלים.</item>
        <item>חילוק זה כמו חלוקה הוגנת. כשחולקים %1$d בין %2$d, כל אחד מקבל %3$d.</item>
        <item>כמה קבוצות של %2$d אפשר ליצור מ-%1$d? אפשר ליצור בדיוק %3$d קבוצות.</item>
        <item>נסיעה ברכב היא באורך %1$d קילומטרים. אם רוצים לסיים אותה ב-%2$d שעות, צריך לנסוע %3$d קילומטרים בכל שעה.</item>
        <item>יש לך %1$d קוביות בנייה ואת/ה רוצה לבנות מגדלים בגובה %2$d קוביות. תוכלי לבנות %3$d מגדלים.</item>
        <item>חקלאי אסף %1$d ביצים ושם אותן בקרטונים שמכילים %2$d ביצים כל אחד. החקלאי יכול למלא %3$d קרטונים.</item>
        <item>חילוק הוא הפעולה ההפוכה מכפל. מכיוון ש-%2$d × %3$d = %1$d, אנחנו יודעים ש-%1$d ÷ %2$d = %3$d.</item>
        <item>פיראט מצא אוצר של %1$d מטבעות זהב! כדי לחלוק אותו בצדק עם צוות של %2$d פיראטים, כל פיראט מקבל %3$d מטבעות נוצצים.</item>
        <item>לאמא ציפור יש %1$d תולעים טעימות להאכיל את %2$d גוזליה. כל גוזל זוכה לאכול %3$d תולעים. צייף צייף!</item>
        <item>יש לך %1$d ספרי סיפורים לשים על מדף הספרים שלך. אם כל מדף יכול להכיל %2$d ספרים, תוכלי למלא %3$d מדפים.</item>
        <item>קבוצה של %1$d חייזרים חברותיים רוצה לעלות על רכבת הרים. אם כל קרון מתאים ל-%2$d חייזרים, הם יצטרכו %3$d קרונות כדי שכולם יוכלו לנסוע!</item>
        <item>יש לך %1$d חרוזים להכנת צמידים. אם כל צמיד דורש %2$d חרוזים, תוכלי ליצור %3$d צמידים יפהפיים לחברים שלך.</item>
    </string-array>
</resources>
-----------------------------------------------------------------------------
File: strings.xml
Path: 
Content:
<resources>
    <string name="app_name">גיבור חשבון</string>
    <string name="share_problem_title">שיתוף בעיה</string>
    <string name="archive">ארכיון</string>
    <string name="no_problem_available">אין בעיות חשבון זמינות. אנא חזור/י מחר.</string>
    <string name="disclaimer_title">ברוכים הבאים לגיבור חשבון</string>
    <string name="disclaimer_message">המטרה שלנו היא להפוך את לימוד המתמטיקה לחוויה מהנה. תהנו מהאתגר היומי!</string>
    <string name="notification_channel_name">בעיות חשבון יומיות</string>
    <string name="notification_channel_description">קבלת התראה יומית עם בעיית החשבון של היום.</string>
    <string name="notification_title">אתגר החשבון היומי שלך מחכה!</string>
    <string name="notification_text">לחץ/י כדי לפתור את בעיית החשבון של היום.</string>
    <string name="notifications_disabled_toast">ההתראות כבויות. ניתן להפעיל אותן בהגדרות האפליקציה.</string>
    <string name="archive_title">בעיות קודמות</string>
    <string name="close">סגירה</string>
    <string name="archive_empty">הארכיון ריק. בעיות שפתרת יופיעו כאן!</string>
    <string name="rate_app">דרג/י את האפליקציה</string>
    <string name="privacy_policy">מדיניות פרטיות</string>
    <string name="privacy_policy_title">מדיניות פרטיות</string>
    <string name="privacy_policy_text">אפליקציה זו, גיבור חשבון, היא אפליקציה עצמאית שאינה אוספת, מאחסנת או משתפת נתוני משתמש אישיים. כל הבעיות כלולות בתוך האפליקציה.\n\nשירותי צד שלישי:\n- Google AdMob: כדי לתמוך באפליקציה, אנו משתמשים ב-Google AdMob לפרסום. AdMob עשוי לאסוף נתונים כדי לספק מודעות מותאמות אישית. למידע נוסף, עיין/י במדיניות הפרטיות של גוגל.\n- Google Play Services: האפליקציה עשויה להשתמש בשירותי Google Play לפונקציות ליבה.\n\nעל ידי שימוש באפליקציה זו, את/ה מסכים/ה למדיניות זו.</string>
    <string name="streak_counter_description">מונה רצף יומי</string>
    <string name="confirm_answer">אישור תשובה</string>
    <string name="notification_action_reveal">גלה/י את התשובה</string>
    <string name="notification_action_solved">פתרתי!</string>
    <string name="notification_answer_title">התשובה היא…</string>
    <string name="settings">הגדרות</string>
    <string name="open_source_licenses">רישיונות קוד פתוח</string>
    <string name="notifications_title">התראות</string>
    <string name="enable_daily_problem_notification">הפעל התראות לבעיית חשבון יומית</string>
    <string name="notification_permission_required">נדרשת הרשאה לשליחת התראות. אנא הפעל/י אותה בהגדרות כדי לקבל אתגרים יומיים.</string>
    <string name="action_settings">הגדרות</string>
    <string name="explanation_title">הסבר</string>

    <string name="notification_primer_title">אתגר חשבון יומי</string>
    <string name="notification_primer_message">האם תרצה/י לקבל התראה יומית עם בעיית חשבון חדשה? ניתן לשנות זאת בכל עת בהגדרות.</string>
    <string name="notification_primer_positive">כן, בטח!</string>
    <string name="notification_primer_negative">אולי בפעם אחרת</string>

    <string name="bonus_problem_not_available">בעיית הבונוס אינה זמינה כעת. אנא נסה/י שוב מאוחר יותר.</string>
    <string name="share_solved_format">פתרתי את זה! מה איתך?\n\n\"%1$s\"\n\nבחן/י את כישוריך עם %2$s: %3$s</string>
    <string name="share_unsolved_format">האם תצליח/י לפתור את הבעיה הזו מ-%1$s?\n\n\"%2$s\"\n\nהורד/י את האפליקציה לאתגר יומי: %3$s</string>
    <string name="question_format">%1$s = ?</string>
    <string name="default_explanation">התשובה הנכונה היא %1$d.</string>
    <string name="hint">רמז</string>
    <string name="hero_level_description">דרגת גיבור החשבון הנוכחית</string>

    <string name="ranks_title">דרגות הגיבור</string>
    <string name="rank_locked">נעול</string>
    <string name="rank_up_title">עלית דרגה!</string>
    <string name="rank_up_message">כל הכבוד! עלית לדרגת %1$s!</string>

    <string name="rank_novice">טירון</string>
    <string name="rank_apprentice">שוליה</string>
    <string name="rank_adept">מומחה</string>
    <string name="rank_specialist">מומחה בכיר</string>
    <string name="rank_expert">אמן</string>
    <string name="rank_master">מאסטר</string>
    <string name="rank_grandmaster">רב-אמן</string>
    <string name="rank_legend">אגדה</string>
    <string name="rank_mythic">מיתי</string>
    <string name="rank_titan">טיטאן</string>

    <string name="save_streak_dialog_title">אוי לא!</string>
    <string name="save_streak_dialog_message">הרצף שלך נשבר! האם תרצה/י לשמור על ההתקדמות שלך?</string>
    <string name="save_streak_dialog_positive_button">שמור/י על הרצף (מודעה)</string>
    <string name="save_streak_dialog_positive_button_pro">שמור/י על הרצף (הטבת PRO)</string>
    <string name="save_streak_dialog_negative_button">אפס/י את הרצף</string>
    <string name="rank_requirement_unlocked">הושג ברצף של %d</string>
    <string name="rank_requirement_locked">דורש רצף של %d</string>

    <string name="difficulty">רמת קושי</string>
    <string name="difficulty_selection_title">בחר/י את האתגר שלך</string>
    <string name="difficulty_selection_subtitle">בחר/י רמה כדי להתחיל. ניתן לשנות זאת מאוחר יותר בהגדרות.</string>
    <string name="difficulty_novice">טירון</string>
    <string name="difficulty_novice_desc">חיבור פשוט עם מספרים עד 10.</string>
    <string name="difficulty_apprentice">שוליה</string>
    <string name="difficulty_apprentice_desc">חיבור וחיסור עם מספרים עד 20.</string>
    <string name="difficulty_adept">מומחה</string>
    <string name="difficulty_adept_desc">חיבור וחיסור עם מספרים עד 50.</string>
    <string name="difficulty_expert">אמן</string>
    <string name="difficulty_expert_desc">חיבור, חיסור וכפל עם מספרים עד 20.</string>
    <string name="difficulty_master">מאסטר</string>
    <string name="difficulty_master_desc">כל הפעולות: חיבור, חיסור, כפל וחילוק עם מספרים עד 100.</string>
    <string name="suggest_lower_difficulty_title">קצת מאתגר?</string>
    <string name="suggest_lower_difficulty_message">נראה שהרמה הנוכחית מעט מאתגרת. האם תרצה/י לנסות רמת קושי נמוכה יותר?</string>
    <string name="change_difficulty">שנה/י רמת קושי</string>
    <string name="keep_going">להמשיך</string>
    <string name="enable_sound_effects">הפעל אפקטים קוליים</string>
    <string name="next_problem">הבעיה הבאה</string>
    <string name="difficulty_presets">רמות מוכנות</string>
    <string name="difficulty_customize">או בהתאמה אישית</string>
    <string name="operations">פעולות חשבון</string>
    <string name="largest_number">המספר הגדול ביותר</string>
    <string name="save">שמירה</string>
    <string name="error_no_operation_selected">יש לבחור לפחות פעולת חשבון אחת.</string>
    <string name="custom_difficulty_desc">מותאם: %1$s עד %2$d</string>

    <string name="streak_saved_pro">הרצף שלך בטוח! (הטבת PRO)</string>
    <string name="progress_report">דוח התקדמות</string>
    <string name="upgrade_to_pro">שדרוג ל-PRO</string>
    <string name="upgrade_to_pro_price">שדרוג ל-PRO (%s)</string>
    <string name="pro_user_status">את/ה משתמש/ת PRO!</string>
    <string name="progress_locked_title">גלה/י דוחות התקדמות</string>
    <string name="progress_locked_desc">שדרג/י ל-PRO כדי לראות דוחות מפורטים על דיוק, התקדמות שבועית ועוד!</string>
    <string name="progress_summary">סיכום</string>
    <string name="progress_accuracy">דיוק לפי פעולה</string>
    <string name="progress_total_solved">סה"כ בעיות שנפתרו: %d</string>
    <string name="progress_last_7_days">נפתרו ב-7 הימים האחרונים: %d</string>
    <string name="progress_average_per_day">ממוצע ליום: %s</string>
    <string name="progress_longest_streak">רצף שיא: %d</string>
    <string name="progress_no_accuracy_data">פתור/י כמה בעיות כדי לראות את סטטיסטיקת הדיוק שלך כאן!</string>
    <string name="progress_percentage">%d%%</string>
    <string name="progress_accuracy_details">%1$d נכונות מתוך %2$d</string>

    <string-array name="addition_explanations">
        <item>כדי לחבר %1$d ו-%2$d, אפשר לחשוב שיש לך %1$d פריטים ואתה מקבל עוד %2$d. לספור את כולם יחד נותן לך %3$d!</item>
        <item>דמיין/י שיש לך %1$d קוביות. אם תוסיף/י עוד %2$d קוביות, יהיו לך בסך הכל %3$d קוביות. כל הכבוד!</item>
        <item>התחלה מ-%1$d וספירה של עוד %2$d צעדים על ציר המספרים תביא אותך בדיוק ל-%3$d. זאת התשובה!</item>
        <item>כשאתה משלב קבוצה של %1$d עם קבוצה של %2$d, הקבוצה החדשה והגדולה יותר מכילה %3$d דברים.</item>
        <item>חיבור זה כמו לשים דברים יחד. אז, %1$d ועוד %2$d יוצרים %3$d.</item>
        <item>אם לגיבור-על יש %1$d כוחות והוא לומד %2$d חדשים, עכשיו יש לו %3$d כוחות מדהימים!</item>
        <item>מצאת %1$d אבנים נוצצות, וחבר נתן לך עוד %2$d. עכשיו יש לך אוסף של %3$d אבנים!</item>
        <item>צמח היה בגובה %1$d סנטימטרים. אחרי קצת שמש ומים, הוא צמח בעוד %2$d סנטימטרים. עכשיו גובהו %3$d סנטימטרים!</item>
        <item>בוא/י נשתמש באצבעות! ספר/י %1$d אצבעות, ואז עוד %2$d. בסך הכל, הרמת %3$d אצבעות.</item>
        <item>באוטובוס יש %1$d אנשים. בתחנה הבאה, עוד %2$d אנשים עולים. האוטובוס נוסע עכשיו עם %3$d אנשים.</item>
        <item>אם קראת %1$d עמודים בספר אתמול ו-%2$d עמודים היום, קראת בסך הכל %3$d עמודים.</item>
        <item>מתכון דורש %1$d כוסות קמח ו-%2$d כוסות סוכר. הכמות הכוללת של המרכיבים היבשים היא %3$d כוסות.</item>
        <item>יש לך %1$d מדבקות, וזכית בעוד %2$d. באלבום המדבקות שלך יש עכשיו %3$d מדבקות מדהימות!</item>
        <item>שתי קבוצות משחקות. קבוצה אחת קלעה %1$d נקודות, והשנייה %2$d נקודות. התוצאה הכוללת היא %3$d נקודות.</item>
        <item>חשוב/י על זה כמו טיפוס על סולם. טיפסת %1$d שלבים, לקחת הפסקה, ואז טיפסת עוד %2$d. טיפסת %3$d שלבים!</item>
        <item>לחתול יש %1$d צעצועים והבעלים שלו קונה לו %2$d חדשים. לחתול המאושר יש עכשיו %3$d צעצועים לשחק איתם.</item>
        <item>במשחק וידאו, אספת %1$d מטבעות בשלב אחד ו-%2$d בשלב הבא. הסכום הכולל שלך הוא %3$d מטבעות!</item>
        <item>לפאזל יש שני חלקים. באחד יש %1$d חלקים, ובשני %2$d. הפאזל השלם מורכב מ-%3$d חלקים.</item>
        <item>אם חסכת %1$d שקלים ואז הרווחת עוד %2$d, בקופת החיסכון שלך יהיו %3$d שקלים.</item>
        <item>לשלב %1$d ו-%2$d זה כמו למזג שני נחלים קטנים לנהר גדול. התוצאה היא %3$d אדיר!</item>
        <item>אם לגמד קסום יש %1$d אבני חן נוצצות והוא מוצא עוד %2$d במערה מנצנצת, עכשיו יש לו %3$d אבני חן בכיס האוצר שלו!</item>
        <item>דמיין/י דרקון חברותי עם %1$d עוגיות. אם תיתן/י לו עוד %2$d, הוא ינשנש בשמחה %3$d עוגיות!</item>
        <item>על עלה שושן מים גדול וירוק ישבו %1$d צפרדעים. כש-%2$d חברים צפרדעים נוספים קפצו עליו, התקיימה מסיבה של %3$d צפרדעים!</item>
        <item>בנית מגדל עם %1$d קוביות. חבר שלך הוסיף עוד %2$d קוביות למעלה. וואו! המגדל שלך עכשיו בגובה %3$d קוביות!</item>
        <item>דמיין/י שיש לך %1$d מחשבות שמחות. אם תחשוב/בי על עוד %2$d, המוח שלך יתמלא ב-%3$d מחשבות שמחות!</item>
    </string-array>

    <string-array name="subtraction_explanations">
        <item>חיסור של %2$d מ-%1$d אומר שאתה מתחיל עם %1$d פריטים ולוקח %2$d מהם. נשארת עם %3$d.</item>
        <item>אם יש לך %1$d עוגיות ואת/ה אוכל/ת %2$d מהן, יישארו לך %3$d עוגיות. יאמי!</item>
        <item>על ציר מספרים, אם תתחיל/י ב-%1$d ותזוז/י אחורה %2$d צעדים, תנחת/י על %3$d.</item>
        <item>ההבדל בין %1$d ל-%2$d הוא %3$d. זה מה שנשאר כשאתה לוקח את המספר הקטן מהגדול.</item>
        <item>לקחת %2$d מ-%1$d משאיר אותך עם %3$d. זה כמו חיבור הפוך!</item>
        <item>גיבור-על נלחם ב-%1$d נבלים והביס %2$d מהם. נשארו %3$d נבלים לתפוס!</item>
        <item>יש לך %1$d בלונים, אבל %2$d מהם התפוצצו! אוי לא! עכשיו יש לך %3$d בלונים.</item>
        <item>על עץ היו %1$d תפוחים. אם %2$d תפוחים נפלו על האדמה, עדיין יש %3$d תפוחים על העץ.</item>
        <item>התחלת עם %1$d ממתקים וחלקת %2$d עם חברים. נשארו לך %3$d ממתקים לעצמך.</item>
        <item>חללית נמצאת במשימה של %1$d ימים. אם כבר עברו %2$d ימים, נשארו %3$d ימים למשימה.</item>
        <item>אם בספר יש %1$d עמודים וכבר קראת %2$d מהם, נשארו לך רק %3$d עמודים לקרוא.</item>
        <item>יש לך %1$d שקלים ואת/ה מוציא/ה %2$d על צעצוע. יישארו לך %3$d שקלים.</item>
        <item>מגדל שנבנה מ-%1$d קוביות איבד %2$d קוביות מהחלק העליון. המגדל עכשיו בגובה %3$d קוביות.</item>
        <item>יש %1$d ציפורים על חוט חשמל. אם %2$d מהן עפו, נשארו %3$d ציפורים.</item>
        <item>איזה מספר צריך להוסיף ל-%2$d כדי להגיע ל-%1$d? המספר הזה הוא %3$d!</item>
        <item>דמיין/י מרוץ באורך %1$d קילומטרים. אם כבר רצת %2$d קילומטרים, נשארו לך עוד %3$d.</item>
        <item>בכוס מלאה יש %1$d מ"ל מיץ. אחרי ששתית %2$d מ"ל, נשארו %3$d מ"ל.</item>
        <item>אם את/ה צריך/ה למצוא %1$d אוצרות חבויים וכבר מצאת %2$d, יש עוד %3$d שמחכים להתגלות.</item>
        <item>קבוצה של %1$d פינגווינים נמצאת על קרחון. אם %2$d מהם קופצים למים, %3$d פינגווינים נשארים על הקרח.</item>
        <item>חיסור הוא למצוא כמה נשאר. כש-%2$d נלקח מ-%1$d, הכמות שנותרת היא %3$d.</item>
        <item>ענן רך החזיק %1$d טיפות גשם. אחרי ש-%2$d טיפות נפלו, נשארו בענן %3$d טיפות, שמחכות ליום אחר.</item>
        <item>סנאי קטן אסף %1$d בלוטים לחורף. אם הוא אכל %2$d כנשנוש, עדיין נשארו לו %3$d בלוטים שמורים.</item>
        <item>היו %1$d גחליליות קסומות שהאירו את הלילה. כש-%2$d מהן עפו כדי להגיד שלום לירח, נשארו %3$d גחליליות.</item>
        <item>היו לך %1$d חלקי פאזל. אחרי שהתאמת %2$d חלקים לפאזל, נשארו לך רק %3$d למצוא להם מקום!</item>
        <item>בחללית היו %1$d נוסעים חייזרים. כש-%2$d חייזרים ירדו בכוכב צחקוקים, נשארו %3$d נוסעים על הסיפון.</item>
    </string-array>

    <string-array name="multiplication_explanations">
        <item>להכפיל %1$d ב-%2$d זה כמו לחבר %1$d לעצמו %2$d פעמים. זה נותן לך סך הכל %3$d.</item>
        <item>דמיין/י שיש לך %2$d שקיות, ובכל שקית יש %1$d גולות. בסך הכל, יש לך %3$d גולות!</item>
        <item>זה מבקש %2$d קבוצות של %1$d. אם תספור/י את כל הפריטים בכל הקבוצות, תקבלי %3$d.</item>
        <item>כפל הוא דרך מהירה לחבר. %1$d כפול %2$d זהה ל-%1$d + %1$d… (%2$d פעמים), ששווה ל-%3$d.</item>
        <item>כשאת/ה רואה %1$d × %2$d, זה אומר שיש לך %1$d שחוזר על עצמו %2$d פעמים. התוצאה היא %3$d גדול!</item>
        <item>אם גיבור-על יכול להרים %1$d מכוניות, ו-%2$d גיבורי-על נמצאים שם, יחד הם יכולים להרים %3$d מכוניות! וואו!</item>
        <item>בגינה יש %2$d שורות של פרחים, עם %1$d פרחים בכל שורה. זה יוצר גינה יפהפייה של %3$d פרחים.</item>
        <item>אם את/ה מקבל/ת %1$d מדבקות בעמוד, ויש לך %2$d עמודים, יש לך אוסף ענק של %3$d מדבקות.</item>
        <item>בקופסת צבעים יש %1$d צבעים. אם יש לך %2$d קופסאות, יש לך %3$d צבעים לצייר איתם.</item>
        <item>לתמנון יש 8 זרועות. אם היו %1$d תמנונים (ולכל אחד %2$d זרועות), היו להם %3$d זרועות בסך הכל!</item>
        <item>אם למכונית יש %1$d גלגלים, אז ל-%2$d מכוניות יהיו בסך הכל %3$d גלגלים שמתגלגלים על הכביש.</item>
        <item>את/ה בונה בקוביות. את/ה יוצר/ת %2$d מגדלים, וכל מגדל בגובה %1$d קוביות. השתמשת ב-%3$d קוביות בסך הכל.</item>
        <item>מתכון לעוגיות מפיק %1$d עוגיות בכל אפייה. אם תכין/י %2$d נגלות, יהיו לך %3$d עוגיות לחלוק.</item>
        <item>אם שלב במשחק וידאו נותן לך %1$d נקודות, ואת/ה מנצח/ת %2$d שלבים, תרוויח/י %3$d נקודות.</item>
        <item>חשוב/י על רשת. רשת עם %1$d שורות ו-%2$d עמודות מכילה בסך הכל %3$d ריבועים.</item>
        <item>אם ספר עולה %1$d שקלים, ואת/ה רוצה לקנות %2$d מהם לחברים, תצטרך/י %3$d שקלים.</item>
        <item>לעכביש יש 8 רגליים. אם ראית %1$d עכבישים (ולכל אחד %2$d רגליים), היית רואה %3$d רגליים זוחלות!</item>
        <item>בכל מארז מיצים יש %1$d קרטוניות. אם תקנה/י %2$d מארזים, יהיו לך %3$d קרטוניות מיץ.</item>
        <item>אם תחסוך/כי %1$d שקלים כל שבוע במשך %2$d שבועות, תחסוך/כי %3$d שקלים.</item>
        <item>כפל עוזר לך לספור קבוצות גדולות במהירות. %2$d קבוצות של %1$d זה תמיד %3$d.</item>
        <item>אם כישוף קסום אחד דורש %1$d נצנוצי כוכבים, וקוסם מטיל את הכישוף %2$d פעמים, הוא ישתמש בסך הכל ב-%3$d נצנוצים!</item>
        <item>לצ\'יטה סופר-מהירה יש %1$d כתמים על רגל אחת. אם היית יכול/ה לספור את הכתמים על כל %2$d הרגליים, היית מוצא/ת %3$d כתמים!</item>
        <item>לכל פרח בגינה הקסומה יש %1$d עלי כותרת. אם תקטוף/פי זר של %2$d פרחים, יהיו לך %3$d עלי כותרת יפהפיים.</item>
        <item>אופה מכין קאפקייקס מיוחדים בקבוצות של %1$d. אם הוא יאפה %2$d קבוצות, יהיו לו %3$d קאפקייקס טעימים למכירה!</item>
        <item>במשחק וידאו, כל תיבת אוצר נותנת לך %1$d מטבעות זהב. אם תמצא/י %2$d תיבות, תהיה/י עשיר/ה עם %3$d מטבעות!</item>
    </string-array>

    <string-array name="division_explanations">
        <item>לחלק %1$d ב-%2$d אומר שאתה מפצל %1$d ל-%2$d קבוצות שוות. בכל קבוצה יהיו %3$d פריטים.</item>
        <item>אם יש לך %1$d מדבקות לחלוק שווה בשווה בין %2$d חברים, כל חבר יקבל %3$d מדבקות.</item>
        <item>חילוק שואל, "כמה פעמים %2$d נכנס ב-%1$d?" התשובה היא בדיוק %3$d פעמים!</item>
        <item>חשוב/י על זה כך: %2$d כפול איזה מספר שווה ל-%1$d? המספר החסר הוא %3$d. זה חילוק!</item>
        <item>כשאת/ה מפרק/ת %1$d ל-%2$d חלקים קטנים ואחידים, כל חלק הוא %3$d. כל הכבוד!</item>
        <item>לגיבור-על יש %1$d גאדג\'טים והוא רוצה לשים אותם ב-%2$d חגורות, עם אותו מספר בכל אחת. כל חגורה תחזיק %3$d גאדג\'טים.</item>
        <item>אפית %1$d עוגיות ורוצה לשים אותן בשקיות של %2$d עוגיות כל אחת. תוכלי להכין %3$d שקיות.</item>
        <item>פיצה נחתכה ל-%1$d משולשים. אם %2$d אנשים חולקים אותה שווה בשווה, כל אחד יאכל %3$d משולשים.</item>
        <item>קבוצה של %1$d שחקנים צריכה להתחלק ל-%2$d קבוצות קטנות יותר. בכל קבוצה קטנה יהיו %3$d שחקנים.</item>
        <item>אם יש לך חבל באורך %1$d מטרים ואת/ה חותך/ת אותו ל-%2$d חתיכות שוות, כל חתיכה תהיה באורך %3$d מטרים.</item>
        <item>מחלקים קלפים! אם יש לך %1$d קלפים ו-%2$d שחקנים, אפשר לחלק לכל שחקן %3$d קלפים.</item>
        <item>בספר יש %1$d עמודים. אם תרצה/י לקרוא אותו ב-%2$d ימים, ולקרוא כל יום אותו מספר עמודים, תצטרך/י לקרוא %3$d עמודים ביום.</item>
        <item>יש לך %1$d צעצועים לסדר על %2$d מדפים. כדי שיהיה מסודר, צריך לשים %3$d צעצועים על כל מדף.</item>
        <item>סכום של %1$d שקלים נמצא והוא מחולק בין %2$d אנשים. כל אחד מקבל חלק שווה של %3$d שקלים.</item>
        <item>חילוק זה כמו חלוקה הוגנת. כשחולקים %1$d בין %2$d, כל אחד מקבל %3$d.</item>
        <item>כמה קבוצות של %2$d אפשר ליצור מ-%1$d? אפשר ליצור בדיוק %3$d קבוצות.</item>
        <item>נסיעה ברכב היא באורך %1$d קילומטרים. אם רוצים לסיים אותה ב-%2$d שעות, צריך לנסוע %3$d קילומטרים בכל שעה.</item>
        <item>יש לך %1$d קוביות בנייה ואת/ה רוצה לבנות מגדלים בגובה %2$d קוביות. תוכלי לבנות %3$d מגדלים.</item>
        <item>חקלאי אסף %1$d ביצים ושם אותן בקרטונים שמכילים %2$d ביצים כל אחד. החקלאי יכול למלא %3$d קרטונים.</item>
        <item>חילוק הוא הפעולה ההפוכה מכפל. מכיוון ש-%2$d × %3$d = %1$d, אנחנו יודעים ש-%1$d ÷ %2$d = %3$d.</item>
        <item>פיראט מצא אוצר של %1$d מטבעות זהב! כדי לחלוק אותו בצדק עם צוות של %2$d פיראטים, כל פיראט מקבל %3$d מטבעות נוצצים.</item>
        <item>לאמא ציפור יש %1$d תולעים טעימות להאכיל את %2$d גוזליה. כל גוזל זוכה לאכול %3$d תולעים. צייף צייף!</item>
        <item>יש לך %1$d ספרי סיפורים לשים על מדף הספרים שלך. אם כל מדף יכול להכיל %2$d ספרים, תוכלי למלא %3$d מדפים.</item>
        <item>קבוצה של %1$d חייזרים חברותיים רוצה לעלות על רכבת הרים. אם כל קרון מתאים ל-%2$d חייזרים, הם יצטרכו %3$d קרונות כדי שכולם יוכלו לנסוע!</item>
        <item>יש לך %1$d חרוזים להכנת צמידים. אם כל צמיד דורש %2$d חרוזים, תוכלי ליצור %3$d צמידים יפהפיים לחברים שלך.</item>
    </string-array>
</resources>
-----------------------------------------------------------------------------
File: colors.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Dark Theme Material 3 Colors -->
    <color name="colorPrimary">@color/soft_gold</color>
    <color name="colorOnPrimary">#422C00</color>
    <color name="colorPrimaryContainer">#5B430A</color>
    <color name="colorOnPrimaryContainer">#FFDEAD</color>
    <color name="colorSecondary">#D6C5A0</color>
    <color name="colorOnSecondary">#3A3015</color>
    <color name="colorSecondaryContainer">#51462A</color>
    <color name="colorOnSecondaryContainer">#F3E1BB</color>
    <color name="colorTertiary">#AFCFA8</color>
    <color name="colorOnTertiary">#1B361B</color>
    <color name="colorTertiaryContainer">#324D30</color>
    <color name="colorOnTertiaryContainer">#CBEBC3</color>
    <color name="colorError">#FFB4AB</color>
    <color name="colorOnError">#690005</color>
    <color name="colorErrorContainer">#93000A</color>
    <color name="colorOnErrorContainer">#FFDAD6</color>
    <color name="colorBackground">@color/dark_slate</color>
    <color name="colorOnBackground">@color/off_white</color>
    <color name="colorSurface">@color/dark_slate</color>
    <color name="colorOnSurface">@color/off_white</color>
    <color name="colorSurfaceVariant">#4D4639</color>
    <color name="colorOnSurfaceVariant">#D0C5B4</color>
    <color name="colorOutline">#999080</color>
    <color name="colorInverseOnSurface">#1E1B13</color>
    <color name="colorInverseSurface">@color/off_white</color>
    <color name="colorInversePrimary">#765B22</color>
</resources>
-----------------------------------------------------------------------------
File: backup_rules.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>
-----------------------------------------------------------------------------
File: data_extraction_rules.xml
Path: 
Content:
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>
-----------------------------------------------------------------------------
File: ExampleUnitTest.kt
Path: 
Content:
package io.github.galitach.mathhero

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
-----------------------------------------------------------------------------
